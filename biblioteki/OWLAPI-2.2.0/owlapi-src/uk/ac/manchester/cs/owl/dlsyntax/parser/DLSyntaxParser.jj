options {
    STATIC=false;
    //LOOKAHEAD=3;
    //DEBUG_PARSER=true;
    //DEBUG_TOKEN_MANAGER=true;
}

PARSER_BEGIN(DLSyntaxParser)

package uk.ac.manchester.cs.owl.dlsyntax.parser;

import java.io.Reader;
import java.util.Set;
import java.util.HashSet;
import java.net.URI;
import java.util.*;
import java.net.URI;
import java.net.URISyntaxException;
import org.semanticweb.owl.vocab.XSDVocabulary;
import org.semanticweb.owl.vocab.OWLRDFVocabulary;
import org.semanticweb.owl.util.CollectionFactory;

import org.semanticweb.owl.model.*;


public class DLSyntaxParser {

    private String defaultNamespace = "http://www.sematicweb.org/ontologies/Ontology" + System.nanoTime();

    private Map<String, String> namespaceMap = new HashMap<String, String>();

    private OWLDataFactory factory;

    private Map<String, URI> uriMap = new HashMap<String, URI>();

    private Map<String, URI> qnameURIMap = new HashMap<String, URI>();

    public void setOWLDataFactory(OWLDataFactory factory) {
        this.factory = factory;
    }

    public void setPrefixMapping(String prefix, String namespace) {
        namespaceMap.put(prefix, namespace);
    }

    public void setDefaultNamespace(String ns) {
        defaultNamespace = ns;
    }

    public URI getURI(String val) {
        URI uri = uriMap.get(val);
        if(uri == null) {
            try {
                uri = new URI(val);
                uriMap.put(val, uri);
            }
            catch(URISyntaxException e) {
                e.printStackTrace();
            }
        }
        return uri;
    }

    public URI getURIFromId(String qname) {
        if(qname.equals("top") || qname.equals("\u22A4")) {
            return OWLRDFVocabulary.OWL_THING.getURI();
        }
        if(qname.equals("bottom") || qname.equals("\u22A5")) {
            return OWLRDFVocabulary.OWL_NOTHING.getURI();
        }
        URI uri = qnameURIMap.get(qname);
        if(uri == null) {
            uri = getURI(defaultNamespace + "#" + qname);
            qnameURIMap.put(qname, uri);
        }
        return uri;
    }

}

PARSER_END(DLSyntaxParser)



SKIP: {" "}

// We skip over any white space

SKIP: {"\r" | "\t"}




///////////////////////////////////////////////////////////////////////////////////////////////////////////////////


TOKEN:
{
    <SUBCLASSOF: ("\u2291" | "->" | "sub" | "\\sqsubseteq")>
}

TOKEN:
{
    <EQUIVALENTTO: ("\u2261" | "==" | "\\equiv")>
}

TOKEN:
{
    <DOT: ".">
}


TOKEN:
{
    <INVERSE: "\u207B" | "^-">
}

TOKEN:
{
    <OPENPAR: "(">
}

TOKEN:
{
    <CLOSEPAR: ")">
}

TOKEN:
{
    <OPENSQPAR: "[">
}

TOKEN:
{
    <CLOSESQPAR: "]">
}

TOKEN:
{
    <OPENBRACE: "{">
}

TOKEN:
{
    <CLOSEBRACE: "}">
}

TOKEN:
{
    <COLON: ":">
}
TOKEN:
{
    <AND: ("\u2293" | "and" | "\\sqcap")>
}

TOKEN:
{
    <OR: ("\u2294" | "or" | "\\sqcup")>
}

TOKEN:
{
    <NOT: ("\u00AC" | "not" | "\\lnot")>
}

TOKEN:
{
    <SOME: ("\u2203" | "exists" | "\\exists")>
}

TOKEN:
{
    <ALL: ("\u2200" | "forall" | "\\forall")>
}

TOKEN:
{
    <MIN: ("\u2265" | ">" | "\\geq")>
}

TOKEN:
{
    <MAX: ("\u2264" | "<" | "\\leq")>
}

TOKEN:
{
    <EXACT: ("=" | "equal")>
}

TOKEN:
{
    <IN: ("in" | "\u2208")>
}

TOKEN:
{
    <TRANSITIVEROLES: ("trans" | "transitive" | "R\u207A")>
}


TOKEN:
{
    <INT: (["0"-"9"])+>
}


TOKEN: {
    <ID: ((~[" ", "\n", "\t", "(", ")", "[", "]", "{", "}", ",", "^", "=", "<", ">", ".", "\u207B", "\u00AC", "\u2208"]))+>
}


OWLDescription parseDescription() :
{
    OWLDescription desc;
}
{
    desc = parseClassDescription() <EOF> {
        return desc;
    }
}

public Set<OWLAxiom> parseAxioms() :
{
    OWLAxiom ax;
    Set<OWLAxiom> axioms = new LinkedHashSet<OWLAxiom>();
}
{
    (ax=parseAxiom(){axioms.add(ax);}) ("\n" ax=parseAxiom(){axioms.add(ax);})*<EOF>  {
        return axioms;
    }
}

public OWLAxiom parseAxiom() :
{
    OWLAxiom ax;
}
{
    (<COLON> ax = parsePropertyAxiom() {return ax;})
    |
    (ax = parseClassAxiom() {return ax;})
}

public OWLAxiom parseClassAxiom() :
{
    OWLDescription lhs;
    OWLDescription rhs;
    boolean subClassAxiom = false;
}
{
    (lhs = parseClassDescription()

    (<SUBCLASSOF>
        rhs = parseClassDescription() {
               if(lhs.isOWLThing()) {
                        if(rhs instanceof OWLObjectAllRestriction) {
                            // Interpret as Range
                            OWLObjectAllRestriction restriction = (OWLObjectAllRestriction) rhs;
                            return factory.getOWLObjectPropertyRangeAxiom(restriction.getProperty(), restriction.getFiller());
                        }
                        if(rhs instanceof OWLObjectMaxCardinalityRestriction) {
                            OWLObjectMaxCardinalityRestriction restriction = (OWLObjectMaxCardinalityRestriction) rhs;
                            if(restriction.getCardinality() == 1 && restriction.getFiller().isOWLThing()) {
                                return factory.getOWLFunctionalObjectPropertyAxiom(restriction.getProperty());
                            }
                        }
                    }
                    else if(lhs instanceof OWLObjectSomeRestriction) {
                        OWLObjectSomeRestriction restriction = (OWLObjectSomeRestriction) lhs;
                        if(restriction.getFiller().isOWLThing()) {
                            return factory.getOWLObjectPropertyDomainAxiom(restriction.getProperty(), rhs);
                        }
                    }
                    if(rhs instanceof OWLObjectComplementOf && !rhs.isAnonymous()) {
                        return factory.getOWLDisjointClassesAxiom(lhs, ((OWLObjectComplementOf) rhs).getOperand());
                    }
                    return factory.getOWLSubClassAxiom(lhs, rhs);
     }
     |
     <EQUIVALENTTO> rhs = parseClassDescription(){

        return factory.getOWLEquivalentClassesAxiom(lhs, rhs);

     })
    )
}

public OWLAxiom parsePropertyAxiom() :
{
    OWLObjectPropertyExpression lhs;
    OWLObjectPropertyExpression rhs;
}
{
    lhs = parseObjectPropertyId()
    (
        (<SUBCLASSOF> rhs = parseObjectPropertyId() {
            return factory.getOWLSubObjectPropertyAxiom(lhs, rhs);
        })
        |
        (<EQUIVALENTTO> rhs = parseObjectPropertyId() {
            if(rhs instanceof OWLObjectPropertyInverse) {
                OWLObjectPropertyInverse inv = (OWLObjectPropertyInverse) rhs;
                return factory.getOWLInverseObjectPropertiesAxiom(lhs, inv.getInverse());
            }
            return factory.getOWLEquivalentObjectPropertiesAxiom(CollectionFactory.createSet(lhs, rhs));
        })
        |
        (<IN><TRANSITIVEROLES> {
            return factory.getOWLTransitiveObjectPropertyAxiom(lhs);
        })
    )
}

///////////////////////////////////////////////////////////////////////////////////////////////////////
//
// The class description parser
//

public OWLDescription parseClassDescription():
{
    OWLDescription desc;
}
{
    desc = Or() {
        return desc;
    }
}

OWLDescription Or():
{
    OWLDescription desc;
    Set<OWLDescription> operands = new HashSet<OWLDescription>();
}
{
    (desc=And(){operands.add(desc);} (<OR> desc=And(){operands.add(desc);})*) {
        if(operands.size() == 1) {
            return desc;
        }
        else {
            return factory.getOWLObjectUnionOf(operands);
        }
    }
}

OWLDescription And():
{
    OWLDescription desc;
    Set<OWLDescription> operands = new HashSet<OWLDescription>();
}
{
    (desc=NonNaryBooleanDescription(){operands.add(desc);} (<AND> desc=NonNaryBooleanDescription(){operands.add(desc);})*) {
        if(operands.size() == 1) {
            return desc;
        }
        else {
            return factory.getOWLObjectIntersectionOf(operands);
        }
    }
}

OWLDescription NonNaryBooleanDescription():
{
    OWLDescription desc;
}
{

    (desc=parseRestriction()
    |
    desc=parseObjectComplementOf()
    |
    desc=NamedClassOrNestedDescription()) {
        return desc;
    }

}

OWLObjectPropertyExpression parseObjectPropertyId():
{
    URI uri;
    boolean inverse = false;
}
{
    uri=parseId() (<INVERSE>{inverse = true;})?  {
        if(inverse) {
            OWLObjectProperty prop = factory.getOWLObjectProperty(uri);
            return factory.getOWLObjectPropertyInverse(prop);
        }
        else {
            return factory.getOWLObjectProperty(uri);
        }
    }
}


OWLDescription parseRestriction():
{
    OWLDescription desc;
}
{
    (desc=parseSomeRestriction()
    |
    desc=parseAllRestriction()
    |
    desc=parseCardinalityRestriction()
    ){
        return desc;
    }
}

OWLDescription parseSomeRestriction():
{
    OWLObjectPropertyExpression prop;
    OWLDescription filler;
}
{
    (<SOME>  prop=parseObjectPropertyId() (<DOT>)? (filler=NamedClassOrNestedDescription())) {
        return factory.getOWLObjectSomeRestriction(prop, filler);
    }
}

OWLDescription parseAllRestriction():
{
    OWLObjectPropertyExpression prop;
    OWLDescription filler;
}
{
    (<ALL> prop=parseObjectPropertyId() (<DOT>)? (filler=NamedClassOrNestedDescription())) {
        return factory.getOWLObjectAllRestriction(prop, filler);
    }
}

OWLDescription parseCardinalityRestriction():
{
    OWLObjectPropertyExpression prop;
    OWLDescription filler = null;
    boolean min = false;
    boolean exactly = false;
    boolean max = false;
    Token t;
}
{
    ((<MIN>{min=true;} | <EXACT>{exactly=true;} | <MAX>{max=true;}) t=<INT> prop=parseObjectPropertyId() ((<DOT>)? filler=NamedClassOrNestedDescription())?) {
        int card = Integer.parseInt(t.image);
        if(filler == null) {
            filler = factory.getOWLThing();
        }
        if(min) {
            return factory.getOWLObjectMinCardinalityRestriction(prop, card, filler);
        }
        else if(exactly) {
            return factory.getOWLObjectExactCardinalityRestriction(prop, card, filler);
        }
        else {
            return factory.getOWLObjectMaxCardinalityRestriction(prop, card, filler);
        }
    }
}

OWLIndividual parseIndividualId():
{
    URI uri;
}
{
    uri=parseId() {return factory.getOWLIndividual(uri);}
}


OWLDescription parseObjectComplementOf():
{
    OWLDescription op;
}
{
    <NOT> op=NamedClassOrNestedDescription() {
        return factory.getOWLObjectComplementOf(op);
    }
}

OWLDescription parseObjectOneOf():
{
    OWLIndividual ind;
    Set<OWLIndividual> inds = new HashSet<OWLIndividual>();
}
{
    <OPENBRACE>(ind=parseIndividualId(){inds.add(ind);} (ind=parseIndividualId(){inds.add(ind);})*)<CLOSEBRACE>{
        return factory.getOWLObjectOneOf(inds);
    }
}

OWLDescription NamedClassOrNestedDescription():
{
    OWLDescription desc;
}
{
    (desc=parseClassId() | desc=NestedClassDescription()) {
        return desc;
    }
}

OWLClass parseClassId():
{
    URI uri;
}
{
    uri=parseId() {
        return factory.getOWLClass(uri);
    }
}

OWLDescription NestedClassDescription():
{
    OWLDescription desc;
}
{
    (<OPENPAR>desc=Or()<CLOSEPAR>{return desc;}) | (desc = parseObjectOneOf() {return desc;})
}


URI parseId() :
{
    Token t;
}
{
    t=<ID> {
        String name = t.image;
        return getURIFromId(name);
    }
}
