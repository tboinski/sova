/* Generated By:JavaCC: Do not edit this line. DLSyntaxParser.java */
package uk.ac.manchester.cs.owl.dlsyntax.parser;

import org.semanticweb.owl.model.*;
import org.semanticweb.owl.util.CollectionFactory;
import org.semanticweb.owl.vocab.OWLRDFVocabulary;

import java.net.URI;
import java.net.URISyntaxException;
import java.util.*;


public class DLSyntaxParser implements DLSyntaxParserConstants {

    private String defaultNamespace = "http://www.sematicweb.org/ontologies/Ontology" + System.nanoTime();

    private Map<String, String> namespaceMap = new HashMap<String, String>();

    private OWLDataFactory factory;

    private Map<String, URI> uriMap = new HashMap<String, URI>();

    private Map<String, URI> qnameURIMap = new HashMap<String, URI>();

    public void setOWLDataFactory(OWLDataFactory factory) {
        this.factory = factory;
    }

    public void setPrefixMapping(String prefix, String namespace) {
        namespaceMap.put(prefix, namespace);
    }

    public void setDefaultNamespace(String ns) {
        defaultNamespace = ns;
    }

    public URI getURI(String val) {
        URI uri = uriMap.get(val);
        if(uri == null) {
            try {
                uri = new URI(val);
                uriMap.put(val, uri);
            }
            catch(URISyntaxException e) {
                e.printStackTrace();
            }
        }
        return uri;
    }

    public URI getURIFromId(String qname) {
        if(qname.equals("top") || qname.equals("\u22a4")) {
            return OWLRDFVocabulary.OWL_THING.getURI();
        }
        if(qname.equals("bottom") || qname.equals("\u22a5")) {
            return OWLRDFVocabulary.OWL_NOTHING.getURI();
        }
        URI uri = qnameURIMap.get(qname);
        if(uri == null) {
            uri = getURI(defaultNamespace + "#" + qname);
            qnameURIMap.put(qname, uri);
        }
        return uri;
    }

  final public OWLDescription parseDescription() throws ParseException {
    OWLDescription desc;
    desc = parseClassDescription();
    jj_consume_token(0);
        {if (true) return desc;}
    throw new Error("Missing return statement in function");
  }

  final public Set<OWLAxiom> parseAxioms() throws ParseException {
    OWLAxiom ax;
    Set<OWLAxiom> axioms = new LinkedHashSet<OWLAxiom>();
    ax = parseAxiom();
                     axioms.add(ax);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 27:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      jj_consume_token(27);
      ax = parseAxiom();
                                                             axioms.add(ax);
    }
    jj_consume_token(0);
        {if (true) return axioms;}
    throw new Error("Missing return statement in function");
  }

  final public OWLAxiom parseAxiom() throws ParseException {
    OWLAxiom ax;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COLON:
      jj_consume_token(COLON);
      ax = parsePropertyAxiom();
                                        {if (true) return ax;}
      break;
    case OPENPAR:
    case OPENBRACE:
    case NOT:
    case SOME:
    case ALL:
    case MIN:
    case MAX:
    case EXACT:
    case ID:
      ax = parseClassAxiom();
                             {if (true) return ax;}
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public OWLAxiom parseClassAxiom() throws ParseException {
    OWLDescription lhs;
    OWLDescription rhs;
    boolean subClassAxiom = false;
    lhs = parseClassDescription();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SUBCLASSOF:
      jj_consume_token(SUBCLASSOF);
      rhs = parseClassDescription();
               if(lhs.isOWLThing()) {
                        if(rhs instanceof OWLObjectAllRestriction) {
                            // Interpret as Range
                            OWLObjectAllRestriction restriction = (OWLObjectAllRestriction) rhs;
                            {if (true) return factory.getOWLObjectPropertyRangeAxiom(restriction.getProperty(), restriction.getFiller());}
                        }
                        if(rhs instanceof OWLObjectMaxCardinalityRestriction) {
                            OWLObjectMaxCardinalityRestriction restriction = (OWLObjectMaxCardinalityRestriction) rhs;
                            if(restriction.getCardinality() == 1 && restriction.getFiller().isOWLThing()) {
                                {if (true) return factory.getOWLFunctionalObjectPropertyAxiom(restriction.getProperty());}
                            }
                        }
                    }
                    else if(lhs instanceof OWLObjectSomeRestriction) {
                        OWLObjectSomeRestriction restriction = (OWLObjectSomeRestriction) lhs;
                        if(restriction.getFiller().isOWLThing()) {
                            {if (true) return factory.getOWLObjectPropertyDomainAxiom(restriction.getProperty(), rhs);}
                        }
                    }
                    if(rhs instanceof OWLObjectComplementOf && !rhs.isAnonymous()) {
                        {if (true) return factory.getOWLDisjointClassesAxiom(lhs, ((OWLObjectComplementOf) rhs).getOperand());}
                    }
                    {if (true) return factory.getOWLSubClassAxiom(lhs, rhs);}
      break;
    case EQUIVALENTTO:
      jj_consume_token(EQUIVALENTTO);
      rhs = parseClassDescription();
        {if (true) return factory.getOWLEquivalentClassesAxiom(lhs, rhs);}
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public OWLAxiom parsePropertyAxiom() throws ParseException {
    OWLObjectPropertyExpression lhs;
    OWLObjectPropertyExpression rhs;
    lhs = parseObjectPropertyId();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SUBCLASSOF:
      jj_consume_token(SUBCLASSOF);
      rhs = parseObjectPropertyId();
            {if (true) return factory.getOWLSubObjectPropertyAxiom(lhs, rhs);}
      break;
    case EQUIVALENTTO:
      jj_consume_token(EQUIVALENTTO);
      rhs = parseObjectPropertyId();
            if(rhs instanceof OWLObjectPropertyInverse) {
                OWLObjectPropertyInverse inv = (OWLObjectPropertyInverse) rhs;
                {if (true) return factory.getOWLInverseObjectPropertiesAxiom(lhs, inv.getInverse());}
            }
            {if (true) return factory.getOWLEquivalentObjectPropertiesAxiom(CollectionFactory.createSet(lhs, rhs));}
      break;
    case IN:
      jj_consume_token(IN);
      jj_consume_token(TRANSITIVEROLES);
            {if (true) return factory.getOWLTransitiveObjectPropertyAxiom(lhs);}
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public OWLDescription parseClassDescription() throws ParseException {
    OWLDescription desc;
    desc = Or();
        {if (true) return desc;}
    throw new Error("Missing return statement in function");
  }

  final public OWLDescription Or() throws ParseException {
    OWLDescription desc;
    Set<OWLDescription> operands = new HashSet<OWLDescription>();
    desc = And();
                operands.add(desc);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_2;
      }
      jj_consume_token(OR);
      desc = And();
                                                      operands.add(desc);
    }
        if(operands.size() == 1) {
            {if (true) return desc;}
        }
        else {
            {if (true) return factory.getOWLObjectUnionOf(operands);}
        }
    throw new Error("Missing return statement in function");
  }

  final public OWLDescription And() throws ParseException {
    OWLDescription desc;
    Set<OWLDescription> operands = new HashSet<OWLDescription>();
    desc = NonNaryBooleanDescription();
                                      operands.add(desc);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_3;
      }
      jj_consume_token(AND);
      desc = NonNaryBooleanDescription();
                                                                                                   operands.add(desc);
    }
        if(operands.size() == 1) {
            {if (true) return desc;}
        }
        else {
            {if (true) return factory.getOWLObjectIntersectionOf(operands);}
        }
    throw new Error("Missing return statement in function");
  }

  final public OWLDescription NonNaryBooleanDescription() throws ParseException {
    OWLDescription desc;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SOME:
    case ALL:
    case MIN:
    case MAX:
    case EXACT:
      desc = parseRestriction();
      break;
    case NOT:
      desc = parseObjectComplementOf();
      break;
    case OPENPAR:
    case OPENBRACE:
    case ID:
      desc = NamedClassOrNestedDescription();
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        {if (true) return desc;}
    throw new Error("Missing return statement in function");
  }

  final public OWLObjectPropertyExpression parseObjectPropertyId() throws ParseException {
    URI uri;
    boolean inverse = false;
    uri = parseId();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INVERSE:
      jj_consume_token(INVERSE);
                             inverse = true;
      break;
    default:
      jj_la1[7] = jj_gen;
      ;
    }
        if(inverse) {
            OWLObjectProperty prop = factory.getOWLObjectProperty(uri);
            {if (true) return factory.getOWLObjectPropertyInverse(prop);}
        }
        else {
            {if (true) return factory.getOWLObjectProperty(uri);}
        }
    throw new Error("Missing return statement in function");
  }

  final public OWLDescription parseRestriction() throws ParseException {
    OWLDescription desc;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SOME:
      desc = parseSomeRestriction();
      break;
    case ALL:
      desc = parseAllRestriction();
      break;
    case MIN:
    case MAX:
    case EXACT:
      desc = parseCardinalityRestriction();
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        {if (true) return desc;}
    throw new Error("Missing return statement in function");
  }

  final public OWLDescription parseSomeRestriction() throws ParseException {
    OWLObjectPropertyExpression prop;
    OWLDescription filler;
    jj_consume_token(SOME);
    prop = parseObjectPropertyId();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOT:
      jj_consume_token(DOT);
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
    filler = NamedClassOrNestedDescription();
        {if (true) return factory.getOWLObjectSomeRestriction(prop, filler);}
    throw new Error("Missing return statement in function");
  }

  final public OWLDescription parseAllRestriction() throws ParseException {
    OWLObjectPropertyExpression prop;
    OWLDescription filler;
    jj_consume_token(ALL);
    prop = parseObjectPropertyId();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOT:
      jj_consume_token(DOT);
      break;
    default:
      jj_la1[10] = jj_gen;
      ;
    }
    filler = NamedClassOrNestedDescription();
        {if (true) return factory.getOWLObjectAllRestriction(prop, filler);}
    throw new Error("Missing return statement in function");
  }

  final public OWLDescription parseCardinalityRestriction() throws ParseException {
    OWLObjectPropertyExpression prop;
    OWLDescription filler = null;
    boolean min = false;
    boolean exactly = false;
    boolean max = false;
    Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MIN:
      jj_consume_token(MIN);
            min=true;
      break;
    case EXACT:
      jj_consume_token(EXACT);
                                 exactly=true;
      break;
    case MAX:
      jj_consume_token(MAX);
                                                        max=true;
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    t = jj_consume_token(INT);
    prop = parseObjectPropertyId();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOT:
    case OPENPAR:
    case OPENBRACE:
    case ID:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT:
        jj_consume_token(DOT);
        break;
      default:
        jj_la1[12] = jj_gen;
        ;
      }
      filler = NamedClassOrNestedDescription();
      break;
    default:
      jj_la1[13] = jj_gen;
      ;
    }
        int card = Integer.parseInt(t.image);
        if(filler == null) {
            filler = factory.getOWLThing();
        }
        if(min) {
            {if (true) return factory.getOWLObjectMinCardinalityRestriction(prop, card, filler);}
        }
        else if(exactly) {
            {if (true) return factory.getOWLObjectExactCardinalityRestriction(prop, card, filler);}
        }
        else {
            {if (true) return factory.getOWLObjectMaxCardinalityRestriction(prop, card, filler);}
        }
    throw new Error("Missing return statement in function");
  }

  final public OWLIndividual parseIndividualId() throws ParseException {
    URI uri;
    uri = parseId();
                   {if (true) return factory.getOWLIndividual(uri);}
    throw new Error("Missing return statement in function");
  }

  final public OWLDescription parseObjectComplementOf() throws ParseException {
    OWLDescription op;
    jj_consume_token(NOT);
    op = NamedClassOrNestedDescription();
        {if (true) return factory.getOWLObjectComplementOf(op);}
    throw new Error("Missing return statement in function");
  }

  final public OWLDescription parseObjectOneOf() throws ParseException {
    OWLIndividual ind;
    Set<OWLIndividual> inds = new HashSet<OWLIndividual>();
    jj_consume_token(OPENBRACE);
    ind = parseIndividualId();
                                        inds.add(ind);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        ;
        break;
      default:
        jj_la1[14] = jj_gen;
        break label_4;
      }
      ind = parseIndividualId();
                                                                                 inds.add(ind);
    }
    jj_consume_token(CLOSEBRACE);
        {if (true) return factory.getOWLObjectOneOf(inds);}
    throw new Error("Missing return statement in function");
  }

  final public OWLDescription NamedClassOrNestedDescription() throws ParseException {
    OWLDescription desc;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      desc = parseClassId();
      break;
    case OPENPAR:
    case OPENBRACE:
      desc = NestedClassDescription();
      break;
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        {if (true) return desc;}
    throw new Error("Missing return statement in function");
  }

  final public OWLClass parseClassId() throws ParseException {
    URI uri;
    uri = parseId();
        {if (true) return factory.getOWLClass(uri);}
    throw new Error("Missing return statement in function");
  }

  final public OWLDescription NestedClassDescription() throws ParseException {
    OWLDescription desc;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OPENPAR:
      jj_consume_token(OPENPAR);
      desc = Or();
      jj_consume_token(CLOSEPAR);
                                  {if (true) return desc;}
      break;
    case OPENBRACE:
      desc = parseObjectOneOf();
                                                                               {if (true) return desc;}
      break;
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public URI parseId() throws ParseException {
    Token t;
    t = jj_consume_token(ID);
        String name = t.image;
        {if (true) return getURIFromId(name);}
    throw new Error("Missing return statement in function");
  }

  public DLSyntaxParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[17];
  static private int[] jj_la1_0;
  static {
      jj_la1_0();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x8000000,0x47e5100,0x30,0x800030,0x10000,0x8000,0x47e1100,0x80,0x7c0000,0x40,0x40,0x700000,0x40,0x4001140,0x4000000,0x4001100,0x1100,};
   }

  public DLSyntaxParser(java.io.InputStream stream) {
     this(stream, null);
  }
  public DLSyntaxParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new DLSyntaxParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
  }

  public DLSyntaxParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new DLSyntaxParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
  }

  public DLSyntaxParser(DLSyntaxParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
  }

  public void ReInit(DLSyntaxParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[28];
    for (int i = 0; i < 28; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 17; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 28; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

}
