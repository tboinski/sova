/* Generated By:JavaCC: Do not edit this line. OWLFunctionalSyntaxParserTokenManager.java */
package org.coode.owl.functionalparser;

public class OWLFunctionalSyntaxParserTokenManager implements OWLFunctionalSyntaxParserConstants
{
  public  java.io.PrintStream debugStream = System.out;
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0xffffffffffef8000L) != 0L || (active1 & 0x1fffffffL) != 0L)
         {
            jjmatchedKind = 96;
            return 7;
         }
         return -1;
      case 1:
         if ((active0 & 0xffffffffffef8000L) != 0L || (active1 & 0x1fffffffL) != 0L)
         {
            jjmatchedKind = 96;
            jjmatchedPos = 1;
            return 7;
         }
         return -1;
      case 2:
         if ((active0 & 0xffffffffffef8000L) != 0L || (active1 & 0x1fffffffL) != 0L)
         {
            jjmatchedKind = 96;
            jjmatchedPos = 2;
            return 7;
         }
         return -1;
      case 3:
         if ((active0 & 0xffffffffffef8000L) != 0L || (active1 & 0x1fffffffL) != 0L)
         {
            jjmatchedKind = 96;
            jjmatchedPos = 3;
            return 7;
         }
         return -1;
      case 4:
         if ((active0 & 0xffffffffffee8000L) != 0L || (active1 & 0x1fffffffL) != 0L)
         {
            jjmatchedKind = 96;
            jjmatchedPos = 4;
            return 7;
         }
         if ((active0 & 0x10000L) != 0L)
            return 7;
         return -1;
      case 5:
         if ((active0 & 0xffffffffffee8000L) != 0L || (active1 & 0x1ff7ffffL) != 0L)
         {
            jjmatchedKind = 96;
            jjmatchedPos = 5;
            return 7;
         }
         if ((active1 & 0x80000L) != 0L)
            return 7;
         return -1;
      case 6:
         if ((active0 & 0xffffffffffe88000L) != 0L || (active1 & 0x1fb7ffffL) != 0L)
         {
            jjmatchedKind = 96;
            jjmatchedPos = 6;
            return 7;
         }
         if ((active0 & 0x60000L) != 0L || (active1 & 0x400000L) != 0L)
            return 7;
         return -1;
      case 7:
         if ((active0 & 0xfffffefeefe80000L) != 0L || (active1 & 0x1fb7ffffL) != 0L)
         {
            if (jjmatchedPos != 7)
            {
               jjmatchedKind = 96;
               jjmatchedPos = 7;
            }
            return 7;
         }
         if ((active0 & 0x10110008000L) != 0L)
            return 7;
         return -1;
      case 8:
         if ((active0 & 0xfffffffcefe80000L) != 0L || (active1 & 0x1f83ffffL) != 0L)
         {
            jjmatchedKind = 96;
            jjmatchedPos = 8;
            return 7;
         }
         if ((active0 & 0x200000000L) != 0L || (active1 & 0x340000L) != 0L)
            return 7;
         return -1;
      case 9:
         if ((active0 & 0xfffffffc6ee00000L) != 0L || (active1 & 0x1f83ffffL) != 0L)
         {
            jjmatchedKind = 96;
            jjmatchedPos = 9;
            return 7;
         }
         if ((active0 & 0x81080000L) != 0L)
            return 7;
         return -1;
      case 10:
         if ((active0 & 0x404000000L) != 0L || (active1 & 0x8000000L) != 0L)
            return 7;
         if ((active0 & 0xfffffff86ae00000L) != 0L || (active1 & 0x1783ffffL) != 0L)
         {
            jjmatchedKind = 96;
            jjmatchedPos = 10;
            return 7;
         }
         return -1;
      case 11:
         if ((active0 & 0x8000040000000L) != 0L || (active1 & 0x7810300L) != 0L)
            return 7;
         if ((active0 & 0xfff7fff82ae00000L) != 0L || (active1 & 0x1002fcffL) != 0L)
         {
            if (jjmatchedPos != 11)
            {
               jjmatchedKind = 96;
               jjmatchedPos = 11;
            }
            return 7;
         }
         return -1;
      case 12:
         if ((active0 & 0x808800000L) != 0L)
            return 7;
         if ((active0 & 0xfff7fff022600000L) != 0L || (active1 & 0x1003ffffL) != 0L)
         {
            jjmatchedKind = 96;
            jjmatchedPos = 12;
            return 7;
         }
         return -1;
      case 13:
         if ((active0 & 0xcfe7ffe002600000L) != 0L || (active1 & 0x39fffL) != 0L)
         {
            if (jjmatchedPos != 13)
            {
               jjmatchedKind = 96;
               jjmatchedPos = 13;
            }
            return 7;
         }
         if ((active0 & 0x3010001020000000L) != 0L || (active1 & 0x10006000L) != 0L)
            return 7;
         return -1;
      case 14:
         if ((active0 & 0xffe7ffe002200000L) != 0L || (active1 & 0x3d7ffL) != 0L)
         {
            jjmatchedKind = 96;
            jjmatchedPos = 14;
            return 7;
         }
         if ((active0 & 0x400000L) != 0L || (active1 & 0x800L) != 0L)
            return 7;
         return -1;
      case 15:
         if ((active0 & 0xffe7df6000200000L) != 0L || (active1 & 0x3d7ffL) != 0L)
         {
            jjmatchedKind = 96;
            jjmatchedPos = 15;
            return 7;
         }
         if ((active0 & 0x208002000000L) != 0L)
            return 7;
         return -1;
      case 16:
         if ((active0 & 0xffe5df6000000000L) != 0L || (active1 & 0x3d5dfL) != 0L)
         {
            jjmatchedKind = 96;
            jjmatchedPos = 16;
            return 7;
         }
         if ((active0 & 0x2000000200000L) != 0L || (active1 & 0x220L) != 0L)
            return 7;
         return -1;
      case 17:
         if ((active0 & 0xff81db6000000000L) != 0L || (active1 & 0x3d4dfL) != 0L)
         {
            jjmatchedKind = 96;
            jjmatchedPos = 17;
            return 7;
         }
         if ((active0 & 0x64040000000000L) != 0L || (active1 & 0x100L) != 0L)
            return 7;
         return -1;
      case 18:
         if ((active0 & 0xdd81d26000000000L) != 0L || (active1 & 0x3d4dfL) != 0L)
         {
            jjmatchedKind = 96;
            jjmatchedPos = 18;
            return 7;
         }
         if ((active0 & 0x2200090000000000L) != 0L)
            return 7;
         return -1;
      case 19:
         if ((active0 & 0xcd01006000000000L) != 0L || (active1 & 0x3c4dfL) != 0L)
         {
            jjmatchedKind = 96;
            jjmatchedPos = 19;
            return 7;
         }
         if ((active0 & 0x1080d20000000000L) != 0L || (active1 & 0x1000L) != 0L)
            return 7;
         return -1;
      case 20:
         if ((active0 & 0xcd01004000000000L) != 0L || (active1 & 0x2c4dfL) != 0L)
         {
            jjmatchedKind = 96;
            jjmatchedPos = 20;
            return 7;
         }
         if ((active0 & 0x2000000000L) != 0L || (active1 & 0x10000L) != 0L)
            return 7;
         return -1;
      case 21:
         if ((active0 & 0xcc00004000000000L) != 0L || (active1 & 0x2c05fL) != 0L)
         {
            jjmatchedKind = 96;
            jjmatchedPos = 21;
            return 7;
         }
         if ((active0 & 0x101000000000000L) != 0L || (active1 & 0x480L) != 0L)
            return 7;
         return -1;
      case 22:
         if ((active0 & 0xcc00000000000000L) != 0L || (active1 & 0x2805aL) != 0L)
         {
            jjmatchedKind = 96;
            jjmatchedPos = 22;
            return 7;
         }
         if ((active0 & 0x4000000000L) != 0L || (active1 & 0x4005L) != 0L)
            return 7;
         return -1;
      case 23:
         if ((active0 & 0x8400000000000000L) != 0L || (active1 & 0x2800aL) != 0L)
         {
            jjmatchedKind = 96;
            jjmatchedPos = 23;
            return 7;
         }
         if ((active0 & 0x4800000000000000L) != 0L || (active1 & 0x50L) != 0L)
            return 7;
         return -1;
      case 24:
         if ((active0 & 0x8400000000000000L) != 0L || (active1 & 0x28008L) != 0L)
         {
            jjmatchedKind = 96;
            jjmatchedPos = 24;
            return 7;
         }
         if ((active1 & 0x2L) != 0L)
            return 7;
         return -1;
      case 25:
         if ((active0 & 0x8000000000000000L) != 0L || (active1 & 0x28008L) != 0L)
         {
            jjmatchedKind = 96;
            jjmatchedPos = 25;
            return 7;
         }
         if ((active0 & 0x400000000000000L) != 0L)
            return 7;
         return -1;
      case 26:
         if ((active0 & 0x8000000000000000L) != 0L || (active1 & 0x28000L) != 0L)
         {
            jjmatchedKind = 96;
            jjmatchedPos = 26;
            return 7;
         }
         if ((active1 & 0x8L) != 0L)
            return 7;
         return -1;
      case 27:
         if ((active0 & 0x8000000000000000L) != 0L || (active1 & 0x28000L) != 0L)
         {
            jjmatchedKind = 96;
            jjmatchedPos = 27;
            return 7;
         }
         return -1;
      case 28:
         if ((active0 & 0x8000000000000000L) != 0L || (active1 & 0x8000L) != 0L)
         {
            jjmatchedKind = 96;
            jjmatchedPos = 28;
            return 7;
         }
         if ((active1 & 0x20000L) != 0L)
            return 7;
         return -1;
      case 29:
         if ((active0 & 0x8000000000000000L) != 0L || (active1 & 0x8000L) != 0L)
         {
            jjmatchedKind = 96;
            jjmatchedPos = 29;
            return 7;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 34:
         return jjStopAtPos(0, 8);
      case 40:
         return jjStopAtPos(0, 12);
      case 41:
         return jjStopAtPos(0, 13);
      case 47:
         return jjMoveStringLiteralDfa1_0(0x20L, 0x0L);
      case 58:
         return jjStopAtPos(0, 14);
      case 61:
         return jjStopAtPos(0, 93);
      case 64:
         return jjStopAtPos(0, 20);
      case 65:
         return jjMoveStringLiteralDfa1_0(0x1000000L, 0x8L);
      case 67:
         return jjMoveStringLiteralDfa1_0(0x40000L, 0x2000L);
      case 68:
         return jjMoveStringLiteralDfa1_0(0x8fe01834cc00000L, 0x11380L);
      case 69:
         return jjMoveStringLiteralDfa1_0(0x400000002200000L, 0x40L);
      case 70:
         return jjMoveStringLiteralDfa1_0(0x4000000000000000L, 0x400L);
      case 73:
         return jjMoveStringLiteralDfa1_0(0x8000006080020000L, 0x2L);
      case 76:
         return jjMoveStringLiteralDfa1_0(0x10000L, 0x0L);
      case 78:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x68000L);
      case 79:
         return jjMoveStringLiteralDfa1_0(0x3001fe1c30008000L, 0x4000L);
      case 82:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1L);
      case 83:
         return jjMoveStringLiteralDfa1_0(0x300000000080000L, 0x824L);
      case 84:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10L);
      case 94:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1000000000L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10000000L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80000L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x7b00000L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400000L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8000000L);
      default :
         return jjMoveNfa_0(1, 0);
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x20L) != 0L)
            return jjStopAtPos(1, 5);
         break;
      case 87:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000L, active1, 0L);
      case 94:
         if ((active1 & 0x1000000000L) != 0L)
            return jjStopAtPos(1, 100);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0xfe018340010000L, active1, 0x5650b00L);
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x3001fe1c20000000L, active1, 0x4000L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000L, active1, 0xa8001L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000c00000L, active1, 0x2901080L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x2000L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000006083008000L, active1, 0x8L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x8040000L, active1, 0x8000000L);
      case 113:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000200000L, active1, 0x40L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x10000012L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x4300000000080000L, active1, 0x420L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x4L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private final int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 76:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x10002010L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x300000000090000L, active1, 0x20L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0xc000000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000L, active1, 0L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1001L);
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x28000L);
      case 106:
         return jjMoveStringLiteralDfa3_0(active0, 0x3001fe1c20000000L, active1, 0x4000L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000L, active1, 0x40804L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000001000000L, active1, 0x2980400L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000c00000L, active1, 0x80L);
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0xfe018342008000L, active1, 0x8410308L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000200000L, active1, 0x40L);
      case 118:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000006000000000L, active1, 0L);
      case 120:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x5200000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
private final int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa4_0(active0, 0x10080000L, active1, 0L);
      case 68:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x20L);
      case 69:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x6000000L);
      case 73:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x1800000L);
      case 76:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x300000L);
      case 79:
         return jjMoveStringLiteralDfa4_0(active0, 0x300000000000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0xfe018340000000L, active1, 0x8038300L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000000000L, active1, 0x10000400L);
      case 101:
         return jjMoveStringLiteralDfa4_0(active0, 0xb001fe7c20010000L, active1, 0x44802L);
      case 102:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x1000L);
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x80000L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000082200000L, active1, 0x48L);
      case 106:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000c00000L, active1, 0x80L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000L, active1, 0x1L);
      case 109:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000L, active1, 0x4L);
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x10L);
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x1028000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x2000L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x400000L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
private final int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1);
      return 4;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000000L, active1, 0L);
      case 67:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000L, active1, 0L);
      case 69:
         return jjMoveStringLiteralDfa5_0(active0, 0x90000000000000L, active1, 0L);
      case 72:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000000L, active1, 0L);
      case 73:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x800L);
      case 77:
         return jjMoveStringLiteralDfa5_0(active0, 0x60000000000000L, active1, 0L);
      case 79:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000L, active1, 0L);
      case 80:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000L, active1, 0x10300L);
      case 83:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000000000L, active1, 0x8L);
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000L, active1, 0x20L);
      case 98:
         return jjMoveStringLiteralDfa5_0(active0, 0x300000000000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x3001fe1c20000000L, active1, 0x4000L);
      case 101:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000L, active1, 0x701005L);
      case 102:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x2L);
      case 108:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(4, 16, 7);
         return jjMoveStringLiteralDfa5_0(active0, 0x10088000L, active1, 0x8000000L);
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x1800000L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000c00000L, active1, 0x80L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000006000020000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x42010L);
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000010103000000L, active1, 0x100a8400L);
      case 118:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000080200000L, active1, 0x40L);
      case 120:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x6000000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1);
}
private final int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1);
      return 5;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x2000L);
      case 68:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x8000000L);
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x448000011280000L, active1, 0x40L);
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x7800000L);
      case 101:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000L, active1, 0L);
      case 104:
         if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(5, 83, 7);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x4820000080c00000L, active1, 0x10028490L);
      case 106:
         return jjMoveStringLiteralDfa6_0(active0, 0x300000000000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000000000L, active1, 0x2L);
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0x200040000L, active1, 0x300800L);
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x4008000008000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x40000L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x44000000L, active1, 0x411300L);
      case 115:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000006000000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa6_0(active0, 0x3001fe1c20020000L, active1, 0x4024L);
      case 120:
         return jjMoveStringLiteralDfa6_0(active0, 0x90000000000000L, active1, 0x1L);
      case 121:
         return jjMoveStringLiteralDfa6_0(active0, 0x10102000000L, active1, 0x8L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1);
}
private final int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1);
      return 6;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa7_0(active0, 0x80002000000L, active1, 0L);
      case 67:
         return jjMoveStringLiteralDfa7_0(active0, 0x40000000000L, active1, 0L);
      case 69:
         return jjMoveStringLiteralDfa7_0(active0, 0x1200000000000L, active1, 0L);
      case 72:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000000L, active1, 0L);
      case 73:
         return jjMoveStringLiteralDfa7_0(active0, 0x20000000000L, active1, 0L);
      case 77:
         return jjMoveStringLiteralDfa7_0(active0, 0xc00000000000L, active1, 0L);
      case 79:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000000L, active1, 0L);
      case 80:
         return jjMoveStringLiteralDfa7_0(active0, 0x3000000020000000L, active1, 0x4000L);
      case 83:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000000000L, active1, 0L);
      case 85:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000004000000L, active1, 0x40020L);
      case 100:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000000L, active1, 0x800L);
      case 101:
         return jjMoveStringLiteralDfa7_0(active0, 0x8300006200000000L, active1, 0x1002L);
      case 103:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000L, active1, 0x300000L);
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000000000000L, active1, 0x8000001L);
      case 108:
         return jjMoveStringLiteralDfa7_0(active0, 0x402000000200000L, active1, 0x7800040L);
      case 109:
         return jjMoveStringLiteralDfa7_0(active0, 0x4008000000000L, active1, 0x8L);
      case 110:
         if ((active1 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(6, 86, 7);
         return jjMoveStringLiteralDfa7_0(active0, 0x820000008c00000L, active1, 0x80L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000040000000L, active1, 0x10010700L);
      case 112:
         return jjMoveStringLiteralDfa7_0(active0, 0x10100000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x4L);
      case 115:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(6, 17, 7);
         return jjMoveStringLiteralDfa7_0(active0, 0x8000010080000L, active1, 0x2000L);
      case 116:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(6, 18, 7);
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000L, active1, 0x10L);
      case 118:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x28000L);
      case 120:
         return jjMoveStringLiteralDfa7_0(active0, 0x40000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1);
}
private final int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1);
      return 7;
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa8_0(active0, 0x60000000000000L, active1, 0L);
      case 70:
         return jjMoveStringLiteralDfa8_0(active0, 0x8000000000000000L, active1, 0L);
      case 79:
         return jjMoveStringLiteralDfa8_0(active0, 0x6200000000L, active1, 0L);
      case 80:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x20L);
      case 86:
         return jjMoveStringLiteralDfa8_0(active0, 0xa000000000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0x801000000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x380000000000000L, active1, 0x40000L);
      case 101:
         if ((active0 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 32;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0x404010000200000L, active1, 0x28040L);
      case 103:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x8000000L);
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x400001000000L, active1, 0x814L);
      case 108:
         return jjMoveStringLiteralDfa8_0(active0, 0x80000000000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x8L);
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000020c02000000L, active1, 0x10001400L);
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x140000000000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa8_0(active0, 0x8040000000L, active1, 0x10300L);
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0x3000000020000000L, active1, 0x4000L);
      case 115:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(7, 28, 7);
         return jjMoveStringLiteralDfa8_0(active0, 0x10000000080000L, active1, 0x2000L);
      case 116:
         return jjMoveStringLiteralDfa8_0(active0, 0x80000000cc00000L, active1, 0x300080L);
      case 117:
         return jjMoveStringLiteralDfa8_0(active0, 0x80000000L, active1, 0x7800000L);
      case 118:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x1L);
      case 120:
         return jjMoveStringLiteralDfa8_0(active0, 0x1200000000000L, active1, 0x2L);
      case 121:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(7, 15, 7);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1);
}
private final int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1);
      return 8;
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa9_0(active0, 0x400000L, active1, 0L);
      case 68:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x10020080L);
      case 79:
         return jjMoveStringLiteralDfa9_0(active0, 0x800000000080000L, active1, 0x8000L);
      case 82:
         return jjMoveStringLiteralDfa9_0(active0, 0x10000000000L, active1, 0L);
      case 85:
         return jjMoveStringLiteralDfa9_0(active0, 0x800000L, active1, 0L);
      case 86:
         return jjMoveStringLiteralDfa9_0(active0, 0x4000000000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0x406b000088000000L, active1, 0x400L);
      case 98:
         return jjMoveStringLiteralDfa9_0(active0, 0x6000000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x4L);
      case 101:
         if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(8, 82, 7);
         return jjMoveStringLiteralDfa9_0(active0, 0x440000000L, active1, 0x12309L);
      case 102:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(8, 33, 7);
         break;
      case 104:
         if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(8, 84, 7);
         else if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(8, 85, 7);
         break;
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x200804000000L, active1, 0x8000002L);
      case 108:
         return jjMoveStringLiteralDfa9_0(active0, 0x88000000000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa9_0(active0, 0x140000000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa9_0(active0, 0x400400002200000L, active1, 0x40L);
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0x3000000021000000L, active1, 0x4000L);
      case 114:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x20L);
      case 115:
         return jjMoveStringLiteralDfa9_0(active0, 0x1000000000L, active1, 0x7800000L);
      case 116:
         return jjMoveStringLiteralDfa9_0(active0, 0x390020000000000L, active1, 0x1000L);
      case 117:
         return jjMoveStringLiteralDfa9_0(active0, 0x8000000000000000L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x810L);
      case 120:
         return jjMoveStringLiteralDfa9_0(active0, 0x800000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1);
}
private final int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(7, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1);
      return 9;
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa10_0(active0, 0x80c00000000000L, active1, 0L);
      case 73:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x1000L);
      case 79:
         return jjMoveStringLiteralDfa10_0(active0, 0x400000000L, active1, 0x5L);
      case 80:
         return jjMoveStringLiteralDfa10_0(active0, 0x300000000000000L, active1, 0L);
      case 86:
         return jjMoveStringLiteralDfa10_0(active0, 0x81000000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0x4000000000000L, active1, 0x20080L);
      case 98:
         return jjMoveStringLiteralDfa10_0(active0, 0x800000000000000L, active1, 0x8000L);
      case 99:
         return jjMoveStringLiteralDfa10_0(active0, 0x1000000000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa10_0(active0, 0x138000000000L, active1, 0x10L);
      case 102:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(9, 19, 7);
         break;
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x17800800L);
      case 106:
         return jjMoveStringLiteralDfa10_0(active0, 0x6000000000L, active1, 0L);
      case 108:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(9, 31, 7);
         return jjMoveStringLiteralDfa10_0(active0, 0x400a000000400000L, active1, 0x400L);
      case 110:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(9, 24, 7);
         return jjMoveStringLiteralDfa10_0(active0, 0x8000000000800000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0x806000000L, active1, 0x20L);
      case 112:
         return jjMoveStringLiteralDfa10_0(active0, 0x3000040020000000L, active1, 0x4000L);
      case 114:
         return jjMoveStringLiteralDfa10_0(active0, 0x60000040000000L, active1, 0x12300L);
      case 115:
         return jjMoveStringLiteralDfa10_0(active0, 0x10200000000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa10_0(active0, 0x400000008200000L, active1, 0x8000048L);
      case 118:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x2L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1);
}
private final int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(8, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, active1);
      return 10;
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa11_0(active0, 0x200000L, active1, 0L);
      case 68:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x440L);
      case 79:
         return jjMoveStringLiteralDfa11_0(active0, 0x4400000000000000L, active1, 0x10L);
      case 83:
         return jjMoveStringLiteralDfa11_0(active0, 0x10000000000000L, active1, 0L);
      case 86:
         return jjMoveStringLiteralDfa11_0(active0, 0x100000000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa11_0(active0, 0x80c81000400000L, active1, 0L);
      case 98:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x5L);
      case 99:
         return jjMoveStringLiteralDfa11_0(active0, 0x8000000000000000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa11_0(active0, 0x60000000000000L, active1, 0x800L);
      case 101:
         return jjMoveStringLiteralDfa11_0(active0, 0x3000006020000000L, active1, 0x4002L);
      case 102:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(10, 34, 7);
         break;
      case 103:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x10000000L);
      case 105:
         return jjMoveStringLiteralDfa11_0(active0, 0x8800000L, active1, 0L);
      case 106:
         return jjMoveStringLiteralDfa11_0(active0, 0x800000000000000L, active1, 0x8000L);
      case 108:
         return jjMoveStringLiteralDfa11_0(active0, 0x4040000000000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa11_0(active0, 0x8000000000L, active1, 0L);
      case 110:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(10, 26, 7);
         return jjMoveStringLiteralDfa11_0(active0, 0x800000000L, active1, 0x1000L);
      case 112:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x20L);
      case 114:
         return jjMoveStringLiteralDfa11_0(active0, 0x300020000000000L, active1, 0x8L);
      case 115:
         if ((active1 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(10, 91, 7);
         return jjMoveStringLiteralDfa11_0(active0, 0x10000000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa11_0(active0, 0x1200042000000L, active1, 0x32380L);
      case 117:
         return jjMoveStringLiteralDfa11_0(active0, 0xa000000000000L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x7800000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, active1);
}
private final int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(9, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, active1);
      return 11;
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa12_0(active0, 0x1000000000000L, active1, 0L);
      case 79:
         return jjMoveStringLiteralDfa12_0(active0, 0x800000000L, active1, 0x2L);
      case 97:
         return jjMoveStringLiteralDfa12_0(active0, 0x100002000000L, active1, 0x204c0L);
      case 98:
         return jjMoveStringLiteralDfa12_0(active0, 0x4400000000000000L, active1, 0x10L);
      case 99:
         return jjMoveStringLiteralDfa12_0(active0, 0x6000000000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x1000L);
      case 101:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 51, 7);
         else if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(11, 87, 7);
         else if ((active1 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(11, 88, 7);
         else if ((active1 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(11, 89, 7);
         else if ((active1 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(11, 90, 7);
         return jjMoveStringLiteralDfa12_0(active0, 0x812048000000000L, active1, 0x8020L);
      case 105:
         return jjMoveStringLiteralDfa12_0(active0, 0x60000000000000L, active1, 0x10002008L);
      case 106:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x5L);
      case 108:
         return jjMoveStringLiteralDfa12_0(active0, 0x81000200000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa12_0(active0, 0x300000008800000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa12_0(active0, 0x3080c00020000000L, active1, 0x4000L);
      case 115:
         return jjMoveStringLiteralDfa12_0(active0, 0x220000400000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa12_0(active0, 0x8000010000000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa12_0(active0, 0x4000000000000L, active1, 0x800L);
      case 121:
         if ((active0 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 30;
            jjmatchedPos = 11;
         }
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x10300L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, active1);
}
private final int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(10, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, active1);
      return 12;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x10000L);
      case 68:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x100L);
      case 80:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x20080L);
      case 82:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x200L);
      case 83:
         return jjMoveStringLiteralDfa13_0(active0, 0x200000000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa13_0(active0, 0x1000000200000L, active1, 0x800L);
      case 98:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x2L);
      case 99:
         return jjMoveStringLiteralDfa13_0(active0, 0x800000000000000L, active1, 0x8008L);
      case 100:
         return jjMoveStringLiteralDfa13_0(active0, 0x80c00000000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa13_0(active0, 0x4020000000000L, active1, 0x5L);
      case 102:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(12, 35, 7);
         break;
      case 105:
         return jjMoveStringLiteralDfa13_0(active0, 0x8000000000000000L, active1, 0x1000L);
      case 106:
         return jjMoveStringLiteralDfa13_0(active0, 0x4400000000000000L, active1, 0x10L);
      case 108:
         return jjMoveStringLiteralDfa13_0(active0, 0x10100000000000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa13_0(active0, 0x40000000000L, active1, 0L);
      case 110:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(12, 23, 7);
         else if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(12, 27, 7);
         return jjMoveStringLiteralDfa13_0(active0, 0x60008000000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x2000L);
      case 112:
         return jjMoveStringLiteralDfa13_0(active0, 0x300000000000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa13_0(active0, 0x10000000000L, active1, 0x20L);
      case 115:
         return jjMoveStringLiteralDfa13_0(active0, 0x2000000400000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa13_0(active0, 0x3000006022000000L, active1, 0x10004440L);
      case 117:
         return jjMoveStringLiteralDfa13_0(active0, 0x81000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0, active1);
}
private final int jjMoveStringLiteralDfa13_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(11, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, active1);
      return 13;
   }
   switch(curChar)
   {
      case 70:
         return jjMoveStringLiteralDfa14_0(active0, 0x2000000000000L, active1, 0L);
      case 79:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x8L);
      case 80:
         return jjMoveStringLiteralDfa14_0(active0, 0x6000000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa14_0(active0, 0x60000000000000L, active1, 0x640L);
      case 99:
         return jjMoveStringLiteralDfa14_0(active0, 0x20000000000L, active1, 0x5L);
      case 101:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(13, 36, 7);
         return jjMoveStringLiteralDfa14_0(active0, 0x47002c0000400000L, active1, 0x10L);
      case 102:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(13, 52, 7);
         break;
      case 105:
         return jjMoveStringLiteralDfa14_0(active0, 0x80c10002000000L, active1, 0L);
      case 106:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x2L);
      case 108:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x800L);
      case 110:
         if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(13, 77, 7);
         break;
      case 111:
         return jjMoveStringLiteralDfa14_0(active0, 0x8000000000000000L, active1, 0x100L);
      case 114:
         return jjMoveStringLiteralDfa14_0(active0, 0x1000000000000L, active1, 0x20080L);
      case 115:
         if ((active1 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(13, 92, 7);
         return jjMoveStringLiteralDfa14_0(active0, 0x4000000200000L, active1, 0x10000L);
      case 116:
         return jjMoveStringLiteralDfa14_0(active0, 0x800008000000000L, active1, 0x8020L);
      case 117:
         return jjMoveStringLiteralDfa14_0(active0, 0x100000000000L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x1000L);
      case 121:
         if ((active0 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 29;
            jjmatchedPos = 13;
         }
         return jjMoveStringLiteralDfa14_0(active0, 0x3000000000000000L, active1, 0x4000L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0, active1);
}
private final int jjMoveStringLiteralDfa14_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(12, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0, active1);
      return 14;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x4000L);
      case 68:
         return jjMoveStringLiteralDfa15_0(active0, 0x1000000000000000L, active1, 0L);
      case 70:
         return jjMoveStringLiteralDfa15_0(active0, 0x4000000000000L, active1, 0L);
      case 79:
         return jjMoveStringLiteralDfa15_0(active0, 0x8000000000L, active1, 0L);
      case 80:
         return jjMoveStringLiteralDfa15_0(active0, 0x800000000000000L, active1, 0x8440L);
      case 82:
         return jjMoveStringLiteralDfa15_0(active0, 0x2000000000000000L, active1, 0L);
      case 98:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x8L);
      case 99:
         return jjMoveStringLiteralDfa15_0(active0, 0x4400010000000000L, active1, 0x10L);
      case 100:
         return jjMoveStringLiteralDfa15_0(active0, 0x1000000000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa15_0(active0, 0x100000000000L, active1, 0x2L);
      case 105:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x1000L);
      case 108:
         return jjMoveStringLiteralDfa15_0(active0, 0x60200000000000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x100L);
      case 110:
         return jjMoveStringLiteralDfa15_0(active0, 0x8080c40000000000L, active1, 0x200L);
      case 111:
         return jjMoveStringLiteralDfa15_0(active0, 0x2000000L, active1, 0x20080L);
      case 114:
         return jjMoveStringLiteralDfa15_0(active0, 0x302006000000000L, active1, 0L);
      case 115:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(14, 22, 7);
         else if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(14, 75, 7);
         return jjMoveStringLiteralDfa15_0(active0, 0x80000200000L, active1, 0x10000L);
      case 116:
         return jjMoveStringLiteralDfa15_0(active0, 0x20000000000L, active1, 0x5L);
      case 121:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x20L);
      default :
         break;
   }
   return jjStartNfa_0(13, active0, active1);
}
private final int jjMoveStringLiteralDfa15_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(13, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0, active1);
      return 15;
   }
   switch(curChar)
   {
      case 70:
         return jjMoveStringLiteralDfa16_0(active0, 0x80000000000L, active1, 0L);
      case 79:
         return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0x20L);
      case 80:
         return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0x5L);
      case 97:
         return jjMoveStringLiteralDfa16_0(active0, 0xa080c00000000000L, active1, 0x100L);
      case 99:
         return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0x2L);
      case 100:
         return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0x1000L);
      case 101:
         return jjMoveStringLiteralDfa16_0(active0, 0x200000L, active1, 0x10000L);
      case 102:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(15, 39, 7);
         else if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(15, 45, 7);
         break;
      case 103:
         return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0x200L);
      case 105:
         return jjMoveStringLiteralDfa16_0(active0, 0x61020000000000L, active1, 0L);
      case 106:
         return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0x8L);
      case 110:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(15, 25, 7);
         break;
      case 111:
         return jjMoveStringLiteralDfa16_0(active0, 0x1002006000000000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0x20080L);
      case 114:
         return jjMoveStringLiteralDfa16_0(active0, 0x804000000000000L, active1, 0x8440L);
      case 115:
         return jjMoveStringLiteralDfa16_0(active0, 0x100000000000L, active1, 0x4000L);
      case 116:
         return jjMoveStringLiteralDfa16_0(active0, 0x4700050000000000L, active1, 0x10L);
      default :
         break;
   }
   return jjStartNfa_0(14, active0, active1);
}
private final int jjMoveStringLiteralDfa16_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(14, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, active0, active1);
      return 16;
   }
   switch(curChar)
   {
      case 70:
         return jjMoveStringLiteralDfa17_0(active0, 0x100000000000L, active1, 0L);
      case 79:
         return jjMoveStringLiteralDfa17_0(active0, 0x40000000000L, active1, 0L);
      case 80:
         return jjMoveStringLiteralDfa17_0(active0, 0x4400000000000000L, active1, 0x10L);
      case 101:
         if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(16, 73, 7);
         return jjMoveStringLiteralDfa17_0(active0, 0L, active1, 0x20088L);
      case 102:
         if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(16, 69, 7);
         break;
      case 105:
         return jjMoveStringLiteralDfa17_0(active0, 0x10000000000L, active1, 0x100L);
      case 108:
         return jjMoveStringLiteralDfa17_0(active0, 0x8080c00000000000L, active1, 0L);
      case 109:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(16, 49, 7);
         return jjMoveStringLiteralDfa17_0(active0, 0x1000000000000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa17_0(active0, 0x2001000000000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa17_0(active0, 0x804020000000000L, active1, 0x8440L);
      case 112:
         return jjMoveStringLiteralDfa17_0(active0, 0x6000000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa17_0(active0, 0x80000000000L, active1, 0x10005L);
      case 115:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(16, 21, 7);
         return jjMoveStringLiteralDfa17_0(active0, 0L, active1, 0x4000L);
      case 116:
         return jjMoveStringLiteralDfa17_0(active0, 0x60000000000000L, active1, 0x2L);
      case 117:
         return jjMoveStringLiteralDfa17_0(active0, 0L, active1, 0x1000L);
      case 121:
         return jjMoveStringLiteralDfa17_0(active0, 0x300000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(15, active0, active1);
}
private final int jjMoveStringLiteralDfa17_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(15, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, active0, active1);
      return 17;
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa18_0(active0, 0x100000000000000L, active1, 0L);
      case 79:
         return jjMoveStringLiteralDfa18_0(active0, 0x8200000000000000L, active1, 0L);
      case 80:
         return jjMoveStringLiteralDfa18_0(active0, 0L, active1, 0x2L);
      case 97:
         return jjMoveStringLiteralDfa18_0(active0, 0x1001000000000000L, active1, 0x1000L);
      case 99:
         return jjMoveStringLiteralDfa18_0(active0, 0L, active1, 0x8L);
      case 101:
         return jjMoveStringLiteralDfa18_0(active0, 0x6000000000L, active1, 0x4000L);
      case 102:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(17, 42, 7);
         break;
      case 103:
         return jjMoveStringLiteralDfa18_0(active0, 0x2000000000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa18_0(active0, 0x80c00000000000L, active1, 0L);
      case 109:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(17, 50, 7);
         break;
      case 110:
         if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(17, 72, 7);
         return jjMoveStringLiteralDfa18_0(active0, 0x20000000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa18_0(active0, 0x90000000000L, active1, 0x5L);
      case 112:
         return jjMoveStringLiteralDfa18_0(active0, 0x800000000000000L, active1, 0x8440L);
      case 114:
         return jjMoveStringLiteralDfa18_0(active0, 0x4400100000000000L, active1, 0x20090L);
      case 116:
         return jjMoveStringLiteralDfa18_0(active0, 0L, active1, 0x10000L);
      case 121:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(17, 53, 7);
         else if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(17, 54, 7);
         break;
      default :
         break;
   }
   return jjStartNfa_0(16, active0, active1);
}
private final int jjMoveStringLiteralDfa18_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(16, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, active0, active1);
      return 18;
   }
   switch(curChar)
   {
      case 79:
         return jjMoveStringLiteralDfa19_0(active0, 0x20000000000L, active1, 0L);
      case 98:
         return jjMoveStringLiteralDfa19_0(active0, 0x8000000000000000L, active1, 0L);
      case 101:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(18, 61, 7);
         return jjMoveStringLiteralDfa19_0(active0, 0x800000000000000L, active1, 0x8440L);
      case 102:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(18, 57, 7);
         break;
      case 104:
         return jjMoveStringLiteralDfa19_0(active0, 0x100000000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa19_0(active0, 0x1000000000000000L, active1, 0x10000L);
      case 108:
         return jjMoveStringLiteralDfa19_0(active0, 0x1000000000000L, active1, 0x1000L);
      case 109:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(18, 43, 7);
         break;
      case 110:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(18, 40, 7);
         break;
      case 111:
         return jjMoveStringLiteralDfa19_0(active0, 0x4400100000000000L, active1, 0x10L);
      case 112:
         return jjMoveStringLiteralDfa19_0(active0, 0L, active1, 0x5L);
      case 114:
         return jjMoveStringLiteralDfa19_0(active0, 0x6000000000L, active1, 0x4002L);
      case 116:
         return jjMoveStringLiteralDfa19_0(active0, 0x80c00000000000L, active1, 0x20088L);
      default :
         break;
   }
   return jjStartNfa_0(17, active0, active1);
}
private final int jjMoveStringLiteralDfa19_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(17, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(18, active0, active1);
      return 19;
   }
   switch(curChar)
   {
      case 80:
         return jjMoveStringLiteralDfa20_0(active0, 0L, active1, 0x8L);
      case 97:
         return jjMoveStringLiteralDfa20_0(active0, 0x100000000000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa20_0(active0, 0L, active1, 0x5L);
      case 102:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(19, 41, 7);
         break;
      case 105:
         return jjMoveStringLiteralDfa20_0(active0, 0x1000000000000L, active1, 0x80L);
      case 106:
         return jjMoveStringLiteralDfa20_0(active0, 0x8000000000000000L, active1, 0L);
      case 109:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(19, 44, 7);
         break;
      case 110:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(19, 60, 7);
         break;
      case 111:
         return jjMoveStringLiteralDfa20_0(active0, 0L, active1, 0x10002L);
      case 112:
         return jjMoveStringLiteralDfa20_0(active0, 0x4400000000000000L, active1, 0x10L);
      case 114:
         return jjMoveStringLiteralDfa20_0(active0, 0x800000000000000L, active1, 0x8440L);
      case 115:
         if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(19, 76, 7);
         break;
      case 116:
         return jjMoveStringLiteralDfa20_0(active0, 0x6000000000L, active1, 0x4000L);
      case 121:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(19, 46, 7);
         else if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(19, 47, 7);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(19, 55, 7);
         return jjMoveStringLiteralDfa20_0(active0, 0L, active1, 0x20000L);
      default :
         break;
   }
   return jjStartNfa_0(18, active0, active1);
}
private final int jjMoveStringLiteralDfa20_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(18, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(19, active0, active1);
      return 20;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa21_0(active0, 0L, active1, 0x20000L);
      case 101:
         return jjMoveStringLiteralDfa21_0(active0, 0xc400000000000000L, active1, 0x90L);
      case 105:
         return jjMoveStringLiteralDfa21_0(active0, 0x100004000000000L, active1, 0x4000L);
      case 110:
         if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(20, 80, 7);
         break;
      case 112:
         return jjMoveStringLiteralDfa21_0(active0, 0L, active1, 0x2L);
      case 114:
         return jjMoveStringLiteralDfa21_0(active0, 0L, active1, 0xdL);
      case 116:
         return jjMoveStringLiteralDfa21_0(active0, 0x801000000000000L, active1, 0x8440L);
      case 121:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(20, 37, 7);
         break;
      default :
         break;
   }
   return jjStartNfa_0(19, active0, active1);
}
private final int jjMoveStringLiteralDfa21_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(19, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(20, active0, active1);
      return 21;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa22_0(active0, 0x8000000000000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa22_0(active0, 0x4000000000L, active1, 0x2L);
      case 105:
         return jjMoveStringLiteralDfa22_0(active0, 0x800000000000000L, active1, 0x40L);
      case 110:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(21, 56, 7);
         break;
      case 111:
         return jjMoveStringLiteralDfa22_0(active0, 0L, active1, 0x4008L);
      case 114:
         return jjMoveStringLiteralDfa22_0(active0, 0x4400000000000000L, active1, 0x10L);
      case 115:
         if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(21, 71, 7);
         return jjMoveStringLiteralDfa22_0(active0, 0L, active1, 0x20000L);
      case 116:
         return jjMoveStringLiteralDfa22_0(active0, 0L, active1, 0x5L);
      case 121:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(21, 48, 7);
         else if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(21, 74, 7);
         return jjMoveStringLiteralDfa22_0(active0, 0L, active1, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_0(20, active0, active1);
}
private final int jjMoveStringLiteralDfa22_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(20, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(21, active0, active1);
      return 22;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa23_0(active0, 0L, active1, 0x8000L);
      case 101:
         return jjMoveStringLiteralDfa23_0(active0, 0x800000000000000L, active1, 0x40L);
      case 110:
         if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(22, 78, 7);
         break;
      case 112:
         return jjMoveStringLiteralDfa23_0(active0, 0L, active1, 0x8L);
      case 114:
         return jjMoveStringLiteralDfa23_0(active0, 0L, active1, 0x2L);
      case 115:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(22, 38, 7);
         return jjMoveStringLiteralDfa23_0(active0, 0L, active1, 0x20000L);
      case 116:
         return jjMoveStringLiteralDfa23_0(active0, 0xc400000000000000L, active1, 0x10L);
      case 121:
         if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(22, 64, 7);
         else if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(22, 66, 7);
         break;
      default :
         break;
   }
   return jjStartNfa_0(21, active0, active1);
}
private final int jjMoveStringLiteralDfa23_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(21, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(22, active0, active1);
      return 23;
   }
   switch(curChar)
   {
      case 80:
         return jjMoveStringLiteralDfa24_0(active0, 0x8000000000000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa24_0(active0, 0L, active1, 0x20008L);
      case 105:
         return jjMoveStringLiteralDfa24_0(active0, 0x400000000000000L, active1, 0L);
      case 115:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(23, 59, 7);
         else if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(23, 70, 7);
         return jjMoveStringLiteralDfa24_0(active0, 0L, active1, 0x8000L);
      case 116:
         return jjMoveStringLiteralDfa24_0(active0, 0L, active1, 0x2L);
      case 121:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(23, 62, 7);
         else if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(23, 68, 7);
         break;
      default :
         break;
   }
   return jjStartNfa_0(22, active0, active1);
}
private final int jjMoveStringLiteralDfa24_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(22, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(23, active0, active1);
      return 24;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa25_0(active0, 0x400000000000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa25_0(active0, 0x8000000000000000L, active1, 0x20008L);
      case 115:
         return jjMoveStringLiteralDfa25_0(active0, 0L, active1, 0x8000L);
      case 121:
         if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(24, 65, 7);
         break;
      default :
         break;
   }
   return jjStartNfa_0(23, active0, active1);
}
private final int jjMoveStringLiteralDfa25_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(23, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(24, active0, active1);
      return 25;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa26_0(active0, 0L, active1, 0x8000L);
      case 111:
         return jjMoveStringLiteralDfa26_0(active0, 0x8000000000000000L, active1, 0L);
      case 115:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(25, 58, 7);
         break;
      case 116:
         return jjMoveStringLiteralDfa26_0(active0, 0L, active1, 0x20008L);
      default :
         break;
   }
   return jjStartNfa_0(24, active0, active1);
}
private final int jjMoveStringLiteralDfa26_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(24, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(25, active0, active1);
      return 26;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa27_0(active0, 0L, active1, 0x20000L);
      case 112:
         return jjMoveStringLiteralDfa27_0(active0, 0x8000000000000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa27_0(active0, 0L, active1, 0x8000L);
      case 121:
         if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(26, 67, 7);
         break;
      default :
         break;
   }
   return jjStartNfa_0(25, active0, active1);
}
private final int jjMoveStringLiteralDfa27_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(25, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(26, active0, active1);
      return 27;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa28_0(active0, 0x8000000000000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa28_0(active0, 0L, active1, 0x20000L);
      case 116:
         return jjMoveStringLiteralDfa28_0(active0, 0L, active1, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_0(26, active0, active1);
}
private final int jjMoveStringLiteralDfa28_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(26, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(27, active0, active1);
      return 28;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa29_0(active0, 0L, active1, 0x8000L);
      case 110:
         if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(28, 81, 7);
         break;
      case 114:
         return jjMoveStringLiteralDfa29_0(active0, 0x8000000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(27, active0, active1);
}
private final int jjMoveStringLiteralDfa29_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(27, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(28, active0, active1);
      return 29;
   }
   switch(curChar)
   {
      case 111:
         return jjMoveStringLiteralDfa30_0(active0, 0L, active1, 0x8000L);
      case 116:
         return jjMoveStringLiteralDfa30_0(active0, 0x8000000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(28, active0, active1);
}
private final int jjMoveStringLiteralDfa30_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(28, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(29, active0, active1);
      return 30;
   }
   switch(curChar)
   {
      case 110:
         if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(30, 79, 7);
         break;
      case 121:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(30, 63, 7);
         break;
      default :
         break;
   }
   return jjStartNfa_0(29, active0, active1);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0xfffe7000fffffff6L, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xfe00000000ffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0x0L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec3 = {
   0x0L, 0xbfff000000000000L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec4 = {
   0x3000L, 0xffff000000000000L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec5 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffL, 0x0L
};
static final long[] jjbitVec6 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffL
};
static final long[] jjbitVec7 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec8 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec9 = {
   0x0L, 0x0L, 0x80000000000000L, 0xff7fffffff7fffffL
};
private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 8;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((0x3ff600000000000L & l) != 0L)
                  {
                     if (kind > 97)
                        kind = 97;
                  }
                  else if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 2;
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 94)
                        kind = 94;
                     jjCheckNAdd(0);
                  }
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 94)
                     kind = 94;
                  jjCheckNAdd(0);
                  break;
               case 2:
                  if (curChar == 35)
                     jjCheckNAddTwoStates(3, 4);
                  break;
               case 3:
                  if ((0xbffffffeffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(3, 4);
                  break;
               case 4:
                  if (curChar == 62)
                     kind = 95;
                  break;
               case 5:
                  if ((0x3ff600000000000L & l) != 0L && kind > 97)
                     kind = 97;
                  break;
               case 7:
                  if ((0x3ff600000000000L & l) == 0L)
                     break;
                  if (kind > 96)
                     kind = 96;
                  jjstateSet[jjnewStateCnt++] = 7;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 97)
                        kind = 97;
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 96)
                        kind = 96;
                     jjCheckNAdd(7);
                  }
                  break;
               case 2:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(3, 4);
                  break;
               case 3:
                  jjCheckNAddTwoStates(3, 4);
                  break;
               case 5:
                  if ((0x7fffffe87fffffeL & l) != 0L && kind > 97)
                     kind = 97;
                  break;
               case 6:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 96)
                     kind = 96;
                  jjCheckNAdd(7);
                  break;
               case 7:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 96)
                     kind = 96;
                  jjCheckNAdd(7);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 97)
                        kind = 97;
                  }
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 96)
                        kind = 96;
                     jjCheckNAdd(7);
                  }
                  break;
               case 2:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(3, 4);
                  break;
               case 3:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(3, 4);
                  break;
               case 5:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2) && kind > 97)
                     kind = 97;
                  break;
               case 6:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 96)
                     kind = 96;
                  jjCheckNAdd(7);
                  break;
               case 7:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 96)
                     kind = 96;
                  jjCheckNAdd(7);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 8 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjMoveStringLiteralDfa0_2()
{
   switch(curChar)
   {
      case 34:
         return jjStopAtPos(0, 10);
      case 92:
         return jjMoveStringLiteralDfa1_2(0x200L);
      default :
         return 1;
   }
}
private final int jjMoveStringLiteralDfa1_2(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 34:
         if ((active0 & 0x200L) != 0L)
            return jjStopAtPos(1, 9);
         break;
      default :
         return 2;
   }
   return 2;
}
private final int jjStopStringLiteralDfa_1(int pos, long active0)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_1(int pos, long active0)
{
   return jjMoveNfa_1(jjStopStringLiteralDfa_1(pos, active0), pos + 1);
}
private final int jjStartNfaWithStates_1(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_1(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 10:
         return jjStopAtPos(0, 7);
      default :
         return jjMoveNfa_1(0, 0);
   }
}
private final int jjMoveNfa_1(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     kind = 6;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  kind = 6;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2) && kind > 6)
                     kind = 6;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      case 3:
         return ((jjbitVec3[i2] & l2) != 0L);
      case 32:
         return ((jjbitVec4[i2] & l2) != 0L);
      case 33:
         return ((jjbitVec5[i2] & l2) != 0L);
      case 47:
         return ((jjbitVec6[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec7[i2] & l2) != 0L);
      default : 
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec8[i2] & l2) != 0L);
      default : 
         if ((jjbitVec7[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_2(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec9[i2] & l2) != 0L);
      case 3:
         return ((jjbitVec3[i2] & l2) != 0L);
      case 32:
         return ((jjbitVec4[i2] & l2) != 0L);
      case 33:
         return ((jjbitVec5[i2] & l2) != 0L);
      case 47:
         return ((jjbitVec6[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec7[i2] & l2) != 0L);
      default : 
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, "\50", 
"\51", "\72", "\117\156\164\157\154\157\147\171", "\114\141\142\145\154", 
"\111\155\160\157\162\164\163", "\103\157\155\155\145\156\164", "\123\165\142\103\154\141\163\163\117\146", 
"\100", "\105\161\165\151\166\141\154\145\156\164\103\154\141\163\163\145\163", 
"\104\151\163\152\157\151\156\164\103\154\141\163\163\145\163", "\104\151\163\152\157\151\156\164\125\156\151\157\156", 
"\101\156\156\157\164\141\164\151\157\156", "\105\156\164\151\164\171\101\156\156\157\164\141\164\151\157\156", 
"\104\145\143\154\141\162\141\164\151\157\156", "\104\157\143\165\155\145\156\164\141\164\151\157\156", 
"\117\127\114\103\154\141\163\163", "\117\142\152\145\143\164\120\162\157\160\145\162\164\171", 
"\104\141\164\141\120\162\157\160\145\162\164\171", "\111\156\144\151\166\151\144\165\141\154", 
"\104\141\164\141\164\171\160\145", "\104\141\164\141\117\156\145\117\146", 
"\117\142\152\145\143\164\117\156\145\117\146", "\117\142\152\145\143\164\125\156\151\157\156\117\146", 
"\117\142\152\145\143\164\110\141\163\126\141\154\165\145", 
"\111\156\166\145\162\163\145\117\142\152\145\143\164\120\162\157\160\145\162\164\171", 
"\111\156\166\145\162\163\145\117\142\152\145\143\164\120\162\157\160\145\162\164\151\145\163", "\104\141\164\141\103\157\155\160\154\145\155\145\156\164\117\146", 
"\104\141\164\141\164\171\160\145\122\145\163\164\162\151\143\164\151\157\156", 
"\117\142\152\145\143\164\111\156\164\145\162\163\145\143\164\151\157\156\117\146", "\117\142\152\145\143\164\103\157\155\160\154\145\155\145\156\164\117\146", 
"\117\142\152\145\143\164\101\154\154\126\141\154\165\145\163\106\162\157\155", 
"\117\142\152\145\143\164\123\157\155\145\126\141\154\165\145\163\106\162\157\155", "\117\142\152\145\143\164\105\170\151\163\164\163\123\145\154\146", 
"\117\142\152\145\143\164\115\151\156\103\141\162\144\151\156\141\154\151\164\171", 
"\117\142\152\145\143\164\115\141\170\103\141\162\144\151\156\141\154\151\164\171", 
"\117\142\152\145\143\164\105\170\141\143\164\103\141\162\144\151\156\141\154\151\164\171", "\104\141\164\141\101\154\154\126\141\154\165\145\163\106\162\157\155", 
"\104\141\164\141\123\157\155\145\126\141\154\165\145\163\106\162\157\155", "\104\141\164\141\110\141\163\126\141\154\165\145", 
"\104\141\164\141\105\170\151\163\164\163\123\145\154\146", "\104\141\164\141\115\151\156\103\141\162\144\151\156\141\154\151\164\171", 
"\104\141\164\141\115\141\170\103\141\162\144\151\156\141\154\151\164\171", 
"\104\141\164\141\105\170\141\143\164\103\141\162\144\151\156\141\154\151\164\171", 
"\123\165\142\117\142\152\145\143\164\120\162\157\160\145\162\164\171\103\150\141\151\156", 
"\123\165\142\117\142\152\145\143\164\120\162\157\160\145\162\164\171\117\146", 
"\105\161\165\151\166\141\154\145\156\164\117\142\152\145\143\164\120\162\157\160\145\162\164\151\145\163", 
"\104\151\163\152\157\151\156\164\117\142\152\145\143\164\120\162\157\160\145\162\164\151\145\163", 
"\117\142\152\145\143\164\120\162\157\160\145\162\164\171\104\157\155\141\151\156", 
"\117\142\152\145\143\164\120\162\157\160\145\162\164\171\122\141\156\147\145", 
"\106\165\156\143\164\151\157\156\141\154\117\142\152\145\143\164\120\162\157\160\145\162\164\171", 
"\111\156\166\145\162\163\145\106\165\156\143\164\151\157\156\141\154\117\142\152\145\143\164\120\162\157\160\145\162\164\171", 
"\122\145\146\154\145\170\151\166\145\117\142\152\145\143\164\120\162\157\160\145\162\164\171", 
"\111\162\162\145\146\154\145\170\151\166\145\117\142\152\145\143\164\120\162\157\160\145\162\164\171", 
"\123\171\155\155\145\164\162\151\143\117\142\152\145\143\164\120\162\157\160\145\162\164\171", 
"\101\156\164\151\123\171\155\155\145\164\162\151\143\117\142\152\145\143\164\120\162\157\160\145\162\164\171", 
"\124\162\141\156\163\151\164\151\166\145\117\142\152\145\143\164\120\162\157\160\145\162\164\171", "\123\165\142\104\141\164\141\120\162\157\160\145\162\164\171\117\146", 
"\105\161\165\151\166\141\154\145\156\164\104\141\164\141\120\162\157\160\145\162\164\151\145\163", 
"\104\151\163\152\157\151\156\164\104\141\164\141\120\162\157\160\145\162\164\151\145\163", "\104\141\164\141\120\162\157\160\145\162\164\171\104\157\155\141\151\156", 
"\104\141\164\141\120\162\157\160\145\162\164\171\122\141\156\147\145", 
"\106\165\156\143\164\151\157\156\141\154\104\141\164\141\120\162\157\160\145\162\164\171", "\123\141\155\145\111\156\144\151\166\151\144\165\141\154\163", 
"\104\151\146\146\145\162\145\156\164\111\156\144\151\166\151\144\165\141\154\163", "\103\154\141\163\163\101\163\163\145\162\164\151\157\156", 
"\117\142\152\145\143\164\120\162\157\160\145\162\164\171\101\163\163\145\162\164\151\157\156", 
"\116\145\147\141\164\151\166\145\117\142\152\145\143\164\120\162\157\160\145\162\164\171\101\163\163\145\162\164\151\157\156", 
"\104\141\164\141\120\162\157\160\145\162\164\171\101\163\163\145\162\164\151\157\156", 
"\116\145\147\141\164\151\166\145\104\141\164\141\120\162\157\160\145\162\164\171\101\163\163\145\162\164\151\157\156", "\116\141\155\145\163\160\141\143\145", "\154\145\156\147\164\150", 
"\155\151\156\114\145\156\147\164\150", "\155\141\170\114\145\156\147\164\150", "\160\141\164\164\145\162\156", 
"\155\151\156\111\156\143\154\165\163\151\166\145", "\155\141\170\111\156\143\154\165\163\151\166\145", 
"\155\151\156\105\170\143\154\165\163\151\166\145", "\155\141\170\105\170\143\154\165\163\151\166\145", 
"\164\157\164\141\154\104\151\147\151\164\163", "\146\162\141\143\164\151\157\156\104\151\147\151\164\163", "\75", null, null, 
null, null, null, null, "\136\136", };
public static final String[] lexStateNames = {
   "DEFAULT", 
   "IN_COMMENT", 
   "IN_STRING_LITERAL", 
};
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, 1, -1, 0, 2, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, 
};
static final long[] jjtoToken = {
   0xfffffffffffff401L, 0x1fffffffffL, 
};
static final long[] jjtoSkip = {
   0xdeL, 0x0L, 
};
static final long[] jjtoMore = {
   0xb20L, 0x0L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[8];
private final int[] jjstateSet = new int[16];
protected char curChar;
public OWLFunctionalSyntaxParserTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public OWLFunctionalSyntaxParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 8; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 3 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         if (jjmatchedPos == 0 && jjmatchedKind > 99)
         {
            jjmatchedKind = 99;
         }
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         break;
       case 2:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         if (jjmatchedPos == 0 && jjmatchedKind > 11)
         {
            jjmatchedKind = 11;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

}
