/* Generated By:JavaCC: Do not edit this line. KRSS2ParserTokenManager.java */
package de.uulm.ecs.ai.owl.krssparser;

public class KRSS2ParserTokenManager implements KRSS2ParserConstants
{
  public  java.io.PrintStream debugStream = System.out;
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x1b00800780000L) != 0L)
         {
            jjmatchedKind = 50;
            return 133;
         }
         if ((active0 & 0x3fc000000L) != 0L)
            return 51;
         if ((active0 & 0x400400060000L) != 0L)
         {
            jjmatchedKind = 50;
            return 30;
         }
         if ((active0 & 0x800000L) != 0L)
         {
            jjmatchedKind = 50;
            return 19;
         }
         return -1;
      case 1:
         if ((active0 & 0x1f00f7cfe0000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 1;
            return 133;
         }
         return -1;
      case 2:
         if ((active0 & 0x1f00f7cfe0000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 2;
            return 133;
         }
         return -1;
      case 3:
         if ((active0 & 0x1f00b7cfe0000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 3;
            return 133;
         }
         if ((active0 & 0x400000000L) != 0L)
            return 133;
         return -1;
      case 4:
         if ((active0 & 0x400800000000L) != 0L)
            return 133;
         if ((active0 & 0x1b0037cfe0000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 4;
            return 133;
         }
         return -1;
      case 5:
         if ((active0 & 0x1b00374fe0000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 5;
            return 133;
         }
         if ((active0 & 0x8000000L) != 0L)
            return 133;
         return -1;
      case 6:
         if ((active0 & 0x9000647e0000L) != 0L)
         {
            if (jjmatchedPos != 6)
            {
               jjmatchedKind = 50;
               jjmatchedPos = 6;
            }
            return 133;
         }
         if ((active0 & 0x1200310800000L) != 0L)
            return 133;
         return -1;
      case 7:
         if ((active0 & 0x900120060000L) != 0L)
            return 133;
         if ((active0 & 0x44780000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 7;
            return 133;
         }
         return -1;
      case 8:
         if ((active0 & 0x44780000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 8;
            return 133;
         }
         return -1;
      case 9:
         if ((active0 & 0x44000000L) != 0L)
            return 133;
         if ((active0 & 0x780000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 9;
            return 133;
         }
         return -1;
      case 10:
         if ((active0 & 0x780000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 10;
            return 133;
         }
         return -1;
      case 11:
         if ((active0 & 0x780000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 11;
            return 133;
         }
         return -1;
      case 12:
         if ((active0 & 0x780000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 12;
            return 133;
         }
         return -1;
      case 13:
         if ((active0 & 0x200000L) != 0L)
            return 133;
         if ((active0 & 0x580000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 13;
            return 133;
         }
         return -1;
      case 14:
         if ((active0 & 0x580000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 14;
            return 133;
         }
         return -1;
      case 15:
         if ((active0 & 0x580000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 15;
            return 133;
         }
         return -1;
      case 16:
         if ((active0 & 0x500000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 16;
            return 133;
         }
         if ((active0 & 0x80000L) != 0L)
            return 133;
         return -1;
      case 17:
         if ((active0 & 0x500000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 17;
            return 133;
         }
         return -1;
      case 18:
         if ((active0 & 0x500000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 18;
            return 133;
         }
         return -1;
      case 19:
         if ((active0 & 0x500000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 19;
            return 133;
         }
         return -1;
      case 20:
         if ((active0 & 0x100000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 20;
            return 133;
         }
         if ((active0 & 0x400000L) != 0L)
            return 133;
         return -1;
      case 21:
         if ((active0 & 0x100000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 21;
            return 133;
         }
         return -1;
      case 22:
         if ((active0 & 0x100000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 22;
            return 133;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 40:
         return jjStopAtPos(0, 15);
      case 41:
         return jjStopAtPos(0, 16);
      case 58:
         jjmatchedKind = 31;
         return jjMoveStringLiteralDfa1_0(0x37c000000L);
      case 60:
         return jjStopAtPos(0, 8);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x800000700000L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x400400060000L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x1100000000000L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x80000L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x200800000000L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x800000L);
      default :
         return jjMoveNfa_0(5, 0);
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000L);
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000700000L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x800020000000L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000000L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x100400060000L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x300000000L);
      case 113:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000000L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x48080000L);
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
private final int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x308000000L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000L);
      case 100:
         return jjMoveStringLiteralDfa3_0(active0, 0x60000L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x700000L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000000L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x820000000L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000000L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x900000000000L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x400400000000L);
      case 121:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
private final int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa4_0(active0, 0x60000L);
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x600000000000L);
      case 102:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000L);
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x700000L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000000L);
      case 109:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(3, 34, 133);
         return jjMoveStringLiteralDfa4_0(active0, 0x14080000L);
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000L);
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x300800000L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x900000000000L);
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
private final int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x100010040000L);
      case 101:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(4, 35, 133);
         return jjMoveStringLiteralDfa5_0(active0, 0x320000000L);
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x1800000080000L);
      case 108:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 46, 133);
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000L);
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x700000L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000L);
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000020000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
private final int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 98:
         return jjMoveStringLiteralDfa6_0(active0, 0x60000L);
      case 101:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(5, 27, 133);
         return jjMoveStringLiteralDfa6_0(active0, 0x1200044700000L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000L);
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0x900300000000L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000000L);
      case 116:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
private final int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa7_0(active0, 0x700000L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x900000000000L);
      case 100:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 45, 133);
         break;
      case 101:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(6, 23, 133);
         break;
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000L);
      case 110:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(6, 28, 133);
         break;
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x60000L);
      case 115:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 48, 133);
         return jjMoveStringLiteralDfa7_0(active0, 0x20000000L);
      case 116:
         if ((active0 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 33;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x104000000L);
      case 120:
         return jjMoveStringLiteralDfa7_0(active0, 0x40000000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
private final int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x200000L);
      case 101:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(7, 29, 133);
         else if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 44, 133);
         break;
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x40000000L);
      case 112:
         return jjMoveStringLiteralDfa8_0(active0, 0x500000L);
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000000L);
      case 115:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(7, 32, 133);
         break;
      case 116:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 47, 133);
         break;
      case 118:
         return jjMoveStringLiteralDfa8_0(active0, 0x80000L);
      case 120:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(7, 17, 133);
         else if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(7, 18, 133);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0);
}
private final int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa9_0(active0, 0x80000L);
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x4000000L);
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0x200000L);
      case 114:
         return jjMoveStringLiteralDfa9_0(active0, 0x500000L);
      case 118:
         return jjMoveStringLiteralDfa9_0(active0, 0x40000000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0);
}
private final int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa10_0(active0, 0x80000L);
      case 99:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(9, 26, 133);
         break;
      case 101:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(9, 30, 133);
         break;
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0x500000L);
      case 110:
         return jjMoveStringLiteralDfa10_0(active0, 0x200000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0);
}
private final int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0);
      return 10;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa11_0(active0, 0x280000L);
      case 109:
         return jjMoveStringLiteralDfa11_0(active0, 0x500000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0);
}
private final int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0);
      return 11;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa12_0(active0, 0x200000L);
      case 105:
         return jjMoveStringLiteralDfa12_0(active0, 0x500000L);
      case 111:
         return jjMoveStringLiteralDfa12_0(active0, 0x80000L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0);
}
private final int jjMoveStringLiteralDfa12_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(10, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0);
      return 12;
   }
   switch(curChar)
   {
      case 110:
         return jjMoveStringLiteralDfa13_0(active0, 0x80000L);
      case 112:
         return jjMoveStringLiteralDfa13_0(active0, 0x200000L);
      case 116:
         return jjMoveStringLiteralDfa13_0(active0, 0x500000L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0);
}
private final int jjMoveStringLiteralDfa13_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(11, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0);
      return 13;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa14_0(active0, 0x80000L);
      case 105:
         return jjMoveStringLiteralDfa14_0(active0, 0x500000L);
      case 116:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(13, 21, 133);
         break;
      default :
         break;
   }
   return jjStartNfa_0(12, active0);
}
private final int jjMoveStringLiteralDfa14_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(12, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0);
      return 14;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa15_0(active0, 0x80000L);
      case 118:
         return jjMoveStringLiteralDfa15_0(active0, 0x500000L);
      default :
         break;
   }
   return jjStartNfa_0(13, active0);
}
private final int jjMoveStringLiteralDfa15_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(13, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0);
      return 15;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa16_0(active0, 0x500000L);
      case 112:
         return jjMoveStringLiteralDfa16_0(active0, 0x80000L);
      default :
         break;
   }
   return jjStartNfa_0(14, active0);
}
private final int jjMoveStringLiteralDfa16_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(14, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, active0);
      return 16;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa17_0(active0, 0x500000L);
      case 116:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(16, 19, 133);
         break;
      default :
         break;
   }
   return jjStartNfa_0(15, active0);
}
private final int jjMoveStringLiteralDfa17_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(15, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, active0);
      return 17;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa18_0(active0, 0x100000L);
      case 114:
         return jjMoveStringLiteralDfa18_0(active0, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_0(16, active0);
}
private final int jjMoveStringLiteralDfa18_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(16, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, active0);
      return 18;
   }
   switch(curChar)
   {
      case 111:
         return jjMoveStringLiteralDfa19_0(active0, 0x500000L);
      default :
         break;
   }
   return jjStartNfa_0(17, active0);
}
private final int jjMoveStringLiteralDfa19_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(17, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(18, active0);
      return 19;
   }
   switch(curChar)
   {
      case 108:
         return jjMoveStringLiteralDfa20_0(active0, 0x400000L);
      case 110:
         return jjMoveStringLiteralDfa20_0(active0, 0x100000L);
      default :
         break;
   }
   return jjStartNfa_0(18, active0);
}
private final int jjMoveStringLiteralDfa20_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(18, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(19, active0);
      return 20;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa21_0(active0, 0x100000L);
      case 101:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(20, 22, 133);
         break;
      default :
         break;
   }
   return jjStartNfa_0(19, active0);
}
private final int jjMoveStringLiteralDfa21_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(19, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(20, active0);
      return 21;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa22_0(active0, 0x100000L);
      default :
         break;
   }
   return jjStartNfa_0(20, active0);
}
private final int jjMoveStringLiteralDfa22_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(20, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(21, active0);
      return 22;
   }
   switch(curChar)
   {
      case 112:
         return jjMoveStringLiteralDfa23_0(active0, 0x100000L);
      default :
         break;
   }
   return jjStartNfa_0(21, active0);
}
private final int jjMoveStringLiteralDfa23_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(21, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(22, active0);
      return 23;
   }
   switch(curChar)
   {
      case 116:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(23, 20, 133);
         break;
      default :
         break;
   }
   return jjStartNfa_0(22, active0);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0xfffe7000fffffff6L, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xfe00000000ffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0x80000000000000L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec3 = {
   0x0L, 0xbfff000000000000L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec4 = {
   0x3000L, 0xffff000000000000L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec5 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffL, 0x0L
};
static final long[] jjbitVec6 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffL
};
static final long[] jjbitVec7 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec8 = {
   0x0L, 0x0L, 0x0L, 0xff7fffffff7fffffL
};
private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 155;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 51:
               case 133:
                  if ((0x7ffe0e800000000L & l) == 0L)
                     break;
                  if (kind > 50)
                     kind = 50;
                  jjCheckNAdd(133);
                  break;
               case 5:
                  if ((0x7ffe0e800000000L & l) != 0L)
                  {
                     if (kind > 51)
                        kind = 51;
                  }
                  else if (curChar == 42)
                     jjAddStates(0, 3);
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 49)
                        kind = 49;
                     jjCheckNAdd(39);
                  }
                  else if ((0x400a0c800000000L & l) != 0L)
                  {
                     if (kind > 50)
                        kind = 50;
                     jjCheckNAdd(133);
                  }
                  if (curChar == 58)
                     jjAddStates(4, 5);
                  break;
               case 30:
                  if ((0x7ffe0e800000000L & l) == 0L)
                     break;
                  if (kind > 50)
                     kind = 50;
                  jjCheckNAdd(133);
                  break;
               case 19:
                  if ((0x7ffe0e800000000L & l) == 0L)
                     break;
                  if (kind > 50)
                     kind = 50;
                  jjCheckNAdd(133);
                  break;
               case 39:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 49)
                     kind = 49;
                  jjCheckNAdd(39);
                  break;
               case 40:
                  if ((0x7ffe0e800000000L & l) != 0L && kind > 51)
                     kind = 51;
                  break;
               case 41:
                  if (curChar == 58)
                     jjAddStates(4, 5);
                  break;
               case 106:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 105;
                  break;
               case 112:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 111;
                  break;
               case 124:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 123;
                  break;
               case 130:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 129;
                  break;
               case 132:
                  if ((0x400a0c800000000L & l) == 0L)
                     break;
                  if (kind > 50)
                     kind = 50;
                  jjCheckNAdd(133);
                  break;
               case 134:
                  if (curChar == 42)
                     jjAddStates(0, 3);
                  break;
               case 135:
                  if (curChar == 42 && kind > 11)
                     kind = 11;
                  break;
               case 142:
                  if (curChar == 42 && kind > 12)
                     kind = 12;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 51:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 50)
                        kind = 50;
                     jjCheckNAdd(133);
                  }
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 60;
                  else if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 5:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 51)
                        kind = 51;
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 50)
                        kind = 50;
                     jjCheckNAdd(133);
                  }
                  if ((0x10000000100000L & l) != 0L)
                  {
                     if (kind > 14)
                        kind = 14;
                  }
                  else if (curChar == 65)
                     jjAddStates(6, 9);
                  else if (curChar == 97)
                     jjAddStates(10, 13);
                  else if (curChar == 110)
                     jjAddStates(14, 15);
                  else if (curChar == 78)
                     jjAddStates(16, 17);
                  else if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 37;
                  else if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 30;
                  else if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 23;
                  else if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 19;
                  else if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 15;
                  else if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 13;
                  else if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 10;
                  else if (curChar == 66)
                     jjstateSet[jjnewStateCnt++] = 4;
                  if (curChar == 116)
                     jjAddStates(18, 19);
                  else if (curChar == 84)
                     jjAddStates(20, 21);
                  break;
               case 30:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 50)
                        kind = 50;
                     jjCheckNAdd(133);
                  }
                  if (curChar == 120)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 19:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 50)
                        kind = 50;
                     jjCheckNAdd(133);
                  }
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 0:
                  if (curChar == 77 && kind > 12)
                     kind = 12;
                  break;
               case 1:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 2:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 3:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 4:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 6:
                  if (curChar == 109 && kind > 12)
                     kind = 12;
                  break;
               case 7:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 9:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 10:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 11:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 12:
                  if ((0x10000000100000L & l) != 0L && kind > 14)
                     kind = 14;
                  break;
               case 13:
                  if (curChar == 114 && kind > 37)
                     kind = 37;
                  break;
               case 14:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 15:
                  if (curChar == 82 && kind > 37)
                     kind = 37;
                  break;
               case 16:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 17:
                  if (curChar == 101 && kind > 40)
                     kind = 40;
                  break;
               case 18:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 20:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 21:
                  if (curChar == 69 && kind > 40)
                     kind = 40;
                  break;
               case 22:
                  if (curChar == 77)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 23:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 24:
                  if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 25:
                  if (curChar == 121 && kind > 43)
                     kind = 43;
                  break;
               case 26:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 27:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 28:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 29:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 31:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 32:
                  if (curChar == 89 && kind > 43)
                     kind = 43;
                  break;
               case 33:
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 34:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 35:
                  if (curChar == 67)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 36:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 37:
                  if (curChar == 88)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 38:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 40:
                  if ((0x7fffffe87fffffeL & l) != 0L && kind > 51)
                     kind = 51;
                  break;
               case 42:
                  if (curChar == 101 && kind > 25)
                     kind = 25;
                  break;
               case 43:
                  if (curChar == 118)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 44:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 45:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 46:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 47:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 48:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 49:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 50:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 52:
                  if (curChar == 69 && kind > 25)
                     kind = 25;
                  break;
               case 53:
                  if (curChar == 86)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 54:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 53;
                  break;
               case 55:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 54;
                  break;
               case 56:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 57:
                  if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 56;
                  break;
               case 58:
                  if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 59:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 58;
                  break;
               case 60:
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 59;
                  break;
               case 61:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 60;
                  break;
               case 62:
                  if (curChar == 84)
                     jjAddStates(20, 21);
                  break;
               case 63:
                  if (curChar == 80 && kind > 11)
                     kind = 11;
                  break;
               case 64:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 63;
                  break;
               case 65:
                  if (curChar == 69 && kind > 24)
                     kind = 24;
                  break;
               case 66:
                  if (curChar == 86)
                     jjstateSet[jjnewStateCnt++] = 65;
                  break;
               case 67:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 66;
                  break;
               case 68:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 67;
                  break;
               case 69:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 68;
                  break;
               case 70:
                  if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 69;
                  break;
               case 71:
                  if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 70;
                  break;
               case 72:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 71;
                  break;
               case 73:
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 72;
                  break;
               case 74:
                  if (curChar == 116)
                     jjAddStates(18, 19);
                  break;
               case 75:
                  if (curChar == 112 && kind > 11)
                     kind = 11;
                  break;
               case 76:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 75;
                  break;
               case 77:
                  if (curChar == 101 && kind > 24)
                     kind = 24;
                  break;
               case 78:
                  if (curChar == 118)
                     jjstateSet[jjnewStateCnt++] = 77;
                  break;
               case 79:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 78;
                  break;
               case 80:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 79;
                  break;
               case 81:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 80;
                  break;
               case 82:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 81;
                  break;
               case 83:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 82;
                  break;
               case 84:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 83;
                  break;
               case 85:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 84;
                  break;
               case 86:
                  if (curChar == 78)
                     jjAddStates(16, 17);
                  break;
               case 87:
                  if (curChar == 76 && kind > 13)
                     kind = 13;
                  break;
               case 88:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 87;
                  break;
               case 89:
                  if (curChar == 84 && kind > 38)
                     kind = 38;
                  break;
               case 90:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 89;
                  break;
               case 91:
                  if (curChar == 110)
                     jjAddStates(14, 15);
                  break;
               case 92:
                  if (curChar == 108 && kind > 13)
                     kind = 13;
                  break;
               case 93:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 92;
                  break;
               case 94:
                  if (curChar == 116 && kind > 38)
                     kind = 38;
                  break;
               case 95:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 94;
                  break;
               case 96:
                  if (curChar == 97)
                     jjAddStates(10, 13);
                  break;
               case 97:
                  if (curChar == 100 && kind > 36)
                     kind = 36;
                  break;
               case 98:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 97;
                  break;
               case 99:
                  if (curChar == 108 && kind > 39)
                     kind = 39;
                  break;
               case 100:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 99;
                  break;
               case 101:
                  if (curChar == 116 && kind > 41)
                     kind = 41;
                  break;
               case 102:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 101;
                  break;
               case 103:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 102;
                  break;
               case 104:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 103;
                  break;
               case 105:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 104;
                  break;
               case 107:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 106;
                  break;
               case 108:
                  if (curChar == 116 && kind > 42)
                     kind = 42;
                  break;
               case 109:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 108;
                  break;
               case 110:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 109;
                  break;
               case 111:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 110;
                  break;
               case 113:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 112;
                  break;
               case 114:
                  if (curChar == 65)
                     jjAddStates(6, 9);
                  break;
               case 115:
                  if (curChar == 68 && kind > 36)
                     kind = 36;
                  break;
               case 116:
                  if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 115;
                  break;
               case 117:
                  if (curChar == 76 && kind > 39)
                     kind = 39;
                  break;
               case 118:
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 117;
                  break;
               case 119:
                  if (curChar == 84 && kind > 41)
                     kind = 41;
                  break;
               case 120:
                  if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 119;
                  break;
               case 121:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 120;
                  break;
               case 122:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 121;
                  break;
               case 123:
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 122;
                  break;
               case 125:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 124;
                  break;
               case 126:
                  if (curChar == 84 && kind > 42)
                     kind = 42;
                  break;
               case 127:
                  if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 126;
                  break;
               case 128:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 127;
                  break;
               case 129:
                  if (curChar == 77)
                     jjstateSet[jjnewStateCnt++] = 128;
                  break;
               case 131:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 130;
                  break;
               case 132:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 50)
                     kind = 50;
                  jjCheckNAdd(133);
                  break;
               case 133:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 50)
                     kind = 50;
                  jjCheckNAdd(133);
                  break;
               case 136:
                  if (curChar == 80)
                     jjCheckNAdd(135);
                  break;
               case 137:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 136;
                  break;
               case 138:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 137;
                  break;
               case 139:
                  if (curChar == 112)
                     jjCheckNAdd(135);
                  break;
               case 140:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 139;
                  break;
               case 141:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 140;
                  break;
               case 143:
                  if (curChar == 77)
                     jjCheckNAdd(142);
                  break;
               case 144:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 143;
                  break;
               case 145:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 144;
                  break;
               case 146:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 145;
                  break;
               case 147:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 146;
                  break;
               case 148:
                  if (curChar == 66)
                     jjstateSet[jjnewStateCnt++] = 147;
                  break;
               case 149:
                  if (curChar == 109)
                     jjCheckNAdd(142);
                  break;
               case 150:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 149;
                  break;
               case 151:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 150;
                  break;
               case 152:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 151;
                  break;
               case 153:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 152;
                  break;
               case 154:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 153;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 51:
               case 133:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 50)
                     kind = 50;
                  jjCheckNAdd(133);
                  break;
               case 5:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 51)
                        kind = 51;
                  }
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 50)
                        kind = 50;
                     jjCheckNAdd(133);
                  }
                  break;
               case 30:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 50)
                     kind = 50;
                  jjCheckNAdd(133);
                  break;
               case 19:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 50)
                     kind = 50;
                  jjCheckNAdd(133);
                  break;
               case 40:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 51)
                     kind = 51;
                  break;
               case 132:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 50)
                     kind = 50;
                  jjCheckNAdd(133);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 155 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 62:
         return jjStopAtPos(0, 9);
      default :
         return 1;
   }
}
static final int[] jjnextStates = {
   138, 141, 148, 154, 51, 61, 116, 118, 125, 131, 98, 100, 107, 113, 93, 95, 
   88, 90, 76, 85, 64, 73, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      case 3:
         return ((jjbitVec3[i2] & l2) != 0L);
      case 32:
         return ((jjbitVec4[i2] & l2) != 0L);
      case 33:
         return ((jjbitVec5[i2] & l2) != 0L);
      case 47:
         return ((jjbitVec6[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec7[i2] & l2) != 0L);
      default : 
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec8[i2] & l2) != 0L);
      case 3:
         return ((jjbitVec3[i2] & l2) != 0L);
      case 32:
         return ((jjbitVec4[i2] & l2) != 0L);
      case 33:
         return ((jjbitVec5[i2] & l2) != 0L);
      case 47:
         return ((jjbitVec6[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec7[i2] & l2) != 0L);
      default : 
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, "\50", "\51", "\145\156\144\55\164\142\157\170", 
"\145\156\144\55\141\142\157\170", "\160\162\151\155\151\164\151\166\145\55\143\157\156\143\145\160\164", 
"\144\145\146\151\156\145\55\160\162\151\155\151\164\151\166\145\55\143\157\156\143\145\160\164", "\144\145\146\151\156\145\55\143\157\156\143\145\160\164", 
"\144\145\146\151\156\145\55\160\162\151\155\151\164\151\166\145\55\162\157\154\145", "\163\165\142\162\157\154\145", null, null, 
"\72\163\171\155\155\145\164\162\151\143", "\72\162\141\156\147\145", "\72\144\157\155\141\151\156", 
"\72\151\156\166\145\162\163\145", "\72\162\145\146\154\145\170\151\166\145", "\72", 
"\72\160\141\162\145\156\164\163", "\72\160\141\162\145\156\164", "\145\156\165\155", "\162\141\156\147\145", 
null, null, null, null, null, null, null, null, "\151\156\163\164\141\156\143\145", 
"\162\145\154\141\164\145\144", "\145\161\165\141\154", "\144\151\163\164\151\156\143\164", 
"\151\155\160\154\151\145\163", null, null, null, null, };
public static final String[] lexStateNames = {
   "DEFAULT", 
   "IN_URI", 
};
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, 
};
static final long[] jjtoToken = {
   0x1ffffffffffa01L, 
};
static final long[] jjtoSkip = {
   0xfeL, 
};
static final long[] jjtoMore = {
   0x500L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[155];
private final int[] jjstateSet = new int[310];
protected char curChar;
public KRSS2ParserTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public KRSS2ParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 155; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 2 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         try { input_stream.backup(0);
            while ((curChar < 64 && (0x500002600L & (1L << curChar)) != 0L) || 
                   (curChar >> 6) == 1 && (0x1000000010000000L & (1L << (curChar & 077))) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 10)
         {
            jjmatchedKind = 10;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

}
